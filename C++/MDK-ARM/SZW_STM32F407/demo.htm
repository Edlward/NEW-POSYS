<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\SZW_STM32F407\demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\SZW_STM32F407\demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri May 18 10:14:19 2018
<BR><P>
<H3>Maximum Stack Usage =       1400 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; [local to main_cpp]::running() &rArr;  [local to main_cpp]::running() (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[18c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[38]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">ADC_IRQHandler</a><BR>
 <LI><a href="#[23a]">[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23a]">[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</a><BR>
 <LI><a href="#[343]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[268]">__rw::__rw_throw(int, ...)</a><BR>
 <LI><a href="#[340]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26b]">__rw::__rw_allocate(unsigned, int)</a><BR>
 <LI><a href="#[32b]">__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32b]">__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)</a><BR>
 <LI><a href="#[233]">[local to main_cpp]::running()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[233]">[local to main_cpp]::running()</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a1]">&lang;Func1&rang;</a> from calculateattitude.o(i.<Func1>) referenced from calculateattitude.o(i._ZN9aukf9axisC1Ev)
 <LI><a href="#[8e]">&lang;Func5&rang;</a> from adaptiveunscentedkalmanfilter.o(i.<Func5>) referenced from adaptiveunscentedkalmanfilter.o(i._ZN4AUKFC1EfffRK13action_matrixS2_S2_S2_S2_PFS0_S2_S2_EPFS0_S2_Ej)
 <LI><a href="#[90]">&lang;Func5&rang;</a> from locale.o(i.<Func5>) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[90]">&lang;Func5&rang;</a> from locale.o(i.<Func5>) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1ERKS0_PKcj)
 <LI><a href="#[90]">&lang;Func5&rang;</a> from locale.o(i.<Func5>) referenced from locale.o(i._ZNSt6localeC1ERKS_PKci)
 <LI><a href="#[38]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">CAN1_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">CAN1_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">CAN1_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">CAN1_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[66]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[68]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[75]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[74]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">DMA1_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[77]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[76]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">I2C1_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">I2C1_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">I2C2_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">I2C2_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6f]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6e]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[71]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[70]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[73]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[72]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[57]">SDIO_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[25]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[78]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[28]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">TIM2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">TIM3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">TIM4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">TIM5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">TIM6_DAC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">TIM7_IRQHandler</a> from timer.o(i.TIM7_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">USART2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">USART3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">USART6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[a4]">__default_new_handler()</a> from newhandler.o(i._Z21__default_new_handlerv) referenced from new.o(i._Znwj)
 <LI><a href="#[b0]">deviceBase::~deviceBase__deallocating()</a> from device.o(i._ZN10deviceBaseD0Ev) referenced from device.o(.constdata__ZTV10deviceBase)
 <LI><a href="#[af]">deviceBase::~deviceBase__sub_object()</a> from device.o(i._ZN10deviceBaseD2Ev) referenced from device.o(.constdata__ZTV10deviceBase)
 <LI><a href="#[b2]">ICM20602_Gyro::UpdateData()</a> from icm20602.o(i._ZN13ICM20602_Gyro10UpdateDataEv) referenced from icm20602.o(.constdata__ZTV13ICM20602_Gyro)
 <LI><a href="#[b4]">ICM20602_Gyro::rawDataRead(unsigned char)</a> from icm20602.o(i._ZN13ICM20602_Gyro11rawDataReadEh) referenced from icm20602.o(.constdata__ZTV13ICM20602_Gyro)
 <LI><a href="#[b5]">ICM20602_Gyro::rawDataWrite(unsigned char, unsigned char)</a> from icm20602.o(i._ZN13ICM20602_Gyro12rawDataWriteEhh) referenced from icm20602.o(.constdata__ZTV13ICM20602_Gyro)
 <LI><a href="#[8b]">ICM20602_Gyro::getInstanceNum()</a> from icm20602.o(i._ZN13ICM20602_Gyro14getInstanceNumEv) referenced from timer.o(i.TIM7_IRQHandler)
 <LI><a href="#[8b]">ICM20602_Gyro::getInstanceNum()</a> from icm20602.o(i._ZN13ICM20602_Gyro14getInstanceNumEv) referenced from ahrs.o(i._Z9AHRS_Initv)
 <LI><a href="#[8b]">ICM20602_Gyro::getInstanceNum()</a> from icm20602.o(i._ZN13ICM20602_Gyro14getInstanceNumEv) referenced from main.o(i._ZN25_INTERNAL_8_main_cpp_main7runningEv)
 <LI><a href="#[b1]">ICM20602_Gyro::init()</a> from icm20602.o(i._ZN13ICM20602_Gyro4initEv) referenced from icm20602.o(.constdata__ZTV13ICM20602_Gyro)
 <LI><a href="#[b3]">ICM20602_Gyro::~ICM20602_Gyro__deallocating()</a> from icm20602.o(i._ZN13ICM20602_GyroD0Ev) referenced from icm20602.o(.constdata__ZTV13ICM20602_Gyro)
 <LI><a href="#[a9]">ICM20602_Gyro::~ICM20602_Gyro()</a> from icm20602.o(i._ZN13ICM20602_GyroD1Ev) referenced from icm20602.o(.constdata__ZTV13ICM20602_Gyro)
 <LI><a href="#[a9]">ICM20602_Gyro::~ICM20602_Gyro()</a> from icm20602.o(i._ZN13ICM20602_GyroD1Ev) referenced from icm20602.o(i.__sti___12_ICM20602_cpp_00915af1)
 <LI><a href="#[8d]">action_matrix::~action_matrix()</a> from action_matrix.o(i._ZN13action_matrixD1Ev) referenced from attitudeangle.o(i._Z8integralRK13action_matrixS1_f)
 <LI><a href="#[8d]">action_matrix::~action_matrix()</a> from action_matrix.o(i._ZN13action_matrixD1Ev) referenced from adaptiveunscentedkalmanfilter.o(i._ZN4AUKFC1EfffRK13action_matrixS2_S2_S2_S2_PFS0_S2_S2_EPFS0_S2_Ej)
 <LI><a href="#[8d]">action_matrix::~action_matrix()</a> from action_matrix.o(i._ZN13action_matrixD1Ev) referenced from adaptiveunscentedkalmanfilter.o(i._ZN4AUKFD1Ev)
 <LI><a href="#[8d]">action_matrix::~action_matrix()</a> from action_matrix.o(i._ZN13action_matrixD1Ev) referenced from calculateattitude.o(i._ZN9aukf9axisC1Ev)
 <LI><a href="#[8d]">action_matrix::~action_matrix()</a> from action_matrix.o(i._ZN13action_matrixD1Ev) referenced from calculateattitude.o(i._ZN9aukf9axisD1Ev)
 <LI><a href="#[8d]">action_matrix::~action_matrix()</a> from action_matrix.o(i._ZN13action_matrixD1Ev) referenced from calculateattitude.o(i.__sti___21_calculateAttitude_cpp_initAHRS)
 <LI><a href="#[a6]">[local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a> from rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b012tbc_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE) referenced from rtti.o(i.__dynamic_cast)
 <LI><a href="#[a7]">[local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</a> from rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b017tbc_post_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE) referenced from rtti.o(i.__dynamic_cast)
 <LI><a href="#[82]">[local to unwinder_c]::EIT_comparator(const void*, const void*)</a> from unwinder.o(.text) referenced from unwinder.o(.text)
 <LI><a href="#[7f]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[7c]">[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)</a> from arm_exceptions_throw.o(.text) referenced from arm_exceptions_throw.o(.text)
 <LI><a href="#[9f]">[local to calculateAttitude_cpp]::UKFmeasure(const action_matrix&)</a> from calculateattitude.o(i._ZN43_INTERNAL_21_calculateAttitude_cpp_initAHRS10UKFmeasureERK13action_matrix) referenced from calculateattitude.o(i._ZN9aukf9axisC1Ev)
 <LI><a href="#[a0]">[local to calculateAttitude_cpp]::UKFpre(const action_matrix&, const action_matrix&)</a> from calculateattitude.o(i._ZN43_INTERNAL_21_calculateAttitude_cpp_initAHRS6UKFpreERK13action_matrixS2_) referenced from calculateattitude.o(i._ZN9aukf9axisC1Ev)
 <LI><a href="#[b8]">AUKF::~AUKF__deallocating()</a> from adaptiveunscentedkalmanfilter.o(i._ZN4AUKFD0Ev) referenced from adaptiveunscentedkalmanfilter.o(.constdata__ZTV4AUKF)
 <LI><a href="#[b7]">AUKF::~AUKF()</a> from adaptiveunscentedkalmanfilter.o(i._ZN4AUKFD1Ev) referenced from adaptiveunscentedkalmanfilter.o(.constdata__ZTV4AUKF)
 <LI><a href="#[bd]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[bd]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt14collate_bynameIcE)
 <LI><a href="#[bd]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[ad]">__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj) referenced from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
 <LI><a href="#[a8]">__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</a> from rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev) referenced from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
 <LI><a href="#[a3]">__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</a> from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev) referenced from messages.o(i._ZSt13__rw_get_catsv)
 <LI><a href="#[e9]">__rw::__rw_throw_exception(int, char*)</a> from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc) referenced from rwthrowproc.o(.data)
 <LI><a href="#[7e]">__ARM::default_unexpected_handler()</a> from arm_exceptions_unexpected.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[b6]">device&lang;threeAxis, unsigned char&rang;::getData()</a> from icm20602.o(t._ZN6deviceI9threeAxishE7getDataEv) referenced from icm20602.o(.constdata__ZTV13ICM20602_Gyro)
 <LI><a href="#[b6]">device&lang;threeAxis, unsigned char&rang;::getData()</a> from icm20602.o(t._ZN6deviceI9threeAxishE7getDataEv) referenced from icm20602.o(.constdata__ZTV6deviceI9threeAxishE)
 <LI><a href="#[ba]">device&lang;threeAxis, unsigned char&rang;::~device__deallocating()</a> from icm20602.o(t._ZN6deviceI9threeAxishED0Ev) referenced from icm20602.o(.constdata__ZTV6deviceI9threeAxishE)
 <LI><a href="#[b9]">device&lang;threeAxis, unsigned char&rang;::~device__sub_object()</a> from icm20602.o(t._ZN6deviceI9threeAxishED2Ev) referenced from icm20602.o(.constdata__ZTV6deviceI9threeAxishE)
 <LI><a href="#[bb]">aukf9axis::~aukf9axis__deallocating()</a> from calculateattitude.o(i._ZN9aukf9axisD0Ev) referenced from calculateattitude.o(.constdata__ZTV9aukf9axis)
 <LI><a href="#[aa]">aukf9axis::~aukf9axis()</a> from calculateattitude.o(i._ZN9aukf9axisD1Ev) referenced from calculateattitude.o(.constdata__ZTV9aukf9axis)
 <LI><a href="#[aa]">aukf9axis::~aukf9axis()</a> from calculateattitude.o(i._ZN9aukf9axisD1Ev) referenced from calculateattitude.o(i.__sti___21_calculateAttitude_cpp_initAHRS)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10badbit_setE)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10eofbit_setE)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base11failbit_setE)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base7failureE)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVSt11logic_error)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVSt11range_error)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVSt12domain_error)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVSt12length_error)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVSt12out_of_range)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVSt13runtime_error)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVSt14overflow_error)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVSt15underflow_error)
 <LI><a href="#[bf]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwthrowproc_impl.o(.constdata__ZTVSt16invalid_argument)
 <LI><a href="#[d6]">std::collate_byname&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const</a> from char.o(i._ZNKSt14collate_bynameIcE10do_compareEPKcS2_S2_S2_) referenced from char.o(.constdata__ZTVSt14collate_bynameIcE)
 <LI><a href="#[d7]">std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const</a> from char.o(i._ZNKSt14collate_bynameIcE12do_transformEPKcS2_) referenced from char.o(.constdata__ZTVSt14collate_bynameIcE)
 <LI><a href="#[ca]">std::ctype&lang;char&rang;::do_tolower(char*, const char*) const</a> from char.o(i._ZNKSt5ctypeIcE10do_tolowerEPcPKc) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[ca]">std::ctype&lang;char&rang;::do_tolower(char*, const char*) const</a> from char.o(i._ZNKSt5ctypeIcE10do_tolowerEPcPKc) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[cc]">std::ctype&lang;char&rang;::do_tolower(char) const</a> from char.o(i._ZNKSt5ctypeIcE10do_tolowerEc) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[cc]">std::ctype&lang;char&rang;::do_tolower(char) const</a> from char.o(i._ZNKSt5ctypeIcE10do_tolowerEc) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[c9]">std::ctype&lang;char&rang;::do_toupper(char*, const char*) const</a> from char.o(i._ZNKSt5ctypeIcE10do_toupperEPcPKc) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[c9]">std::ctype&lang;char&rang;::do_toupper(char*, const char*) const</a> from char.o(i._ZNKSt5ctypeIcE10do_toupperEPcPKc) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[cb]">std::ctype&lang;char&rang;::do_toupper(char) const</a> from char.o(i._ZNKSt5ctypeIcE10do_toupperEc) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[cb]">std::ctype&lang;char&rang;::do_toupper(char) const</a> from char.o(i._ZNKSt5ctypeIcE10do_toupperEc) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[d8]">std::collate&lang;char&rang;::do_hash(const char*, const char*) const</a> from char.o(t._ZNKSt7collateIcE7do_hashEPKcS2_) referenced from char.o(.constdata__ZTVSt14collate_bynameIcE)
 <LI><a href="#[e2]">std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[e1]">std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[8f]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[8f]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1ERKS0_PKcj)
 <LI><a href="#[8f]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(i._ZNSt6localeC1ERKS_PKci)
 <LI><a href="#[8f]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
 <LI><a href="#[c3]">std::bad_typeid::~bad_typeid__deallocating()</a> from bad_typeid.o(i._ZNSt10bad_typeidD0Ev) referenced from bad_typeid.o(.constdata__ZTVSt10bad_typeid)
 <LI><a href="#[80]">std::bad_typeid::~bad_typeid()</a> from bad_typeid.o(i._ZNSt10bad_typeidD1Ev) referenced from bad_typeid.o(.constdata__ZTVSt10bad_typeid)
 <LI><a href="#[80]">std::bad_typeid::~bad_typeid()</a> from bad_typeid.o(i._ZNSt10bad_typeidD1Ev) referenced from arm_exceptions_bad_typeid.o(.text)
 <LI><a href="#[c4]">std::logic_error::~logic_error__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt11logic_errorD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt11logic_error)
 <LI><a href="#[92]">std::logic_error::~logic_error()</a> from rwthrowproc_impl.o(i._ZNSt11logic_errorD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt11logic_error)
 <LI><a href="#[92]">std::logic_error::~logic_error()</a> from rwthrowproc_impl.o(i._ZNSt11logic_errorD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[c5]">std::range_error::~range_error__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt11range_errorD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt11range_error)
 <LI><a href="#[98]">std::range_error::~range_error()</a> from rwthrowproc_impl.o(i._ZNSt11range_errorD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt11range_error)
 <LI><a href="#[98]">std::range_error::~range_error()</a> from rwthrowproc_impl.o(i._ZNSt11range_errorD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[c7]">std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</a> from char.o(i._ZNSt12ctype_bynameIcED0Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[c6]">std::ctype_byname&lang;char&rang;::~ctype_byname()</a> from char.o(i._ZNSt12ctype_bynameIcED1Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[cd]">std::domain_error::~domain_error__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt12domain_errorD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt12domain_error)
 <LI><a href="#[93]">std::domain_error::~domain_error()</a> from rwthrowproc_impl.o(i._ZNSt12domain_errorD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt12domain_error)
 <LI><a href="#[93]">std::domain_error::~domain_error()</a> from rwthrowproc_impl.o(i._ZNSt12domain_errorD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[ce]">std::length_error::~length_error__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt12length_errorD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt12length_error)
 <LI><a href="#[95]">std::length_error::~length_error()</a> from rwthrowproc_impl.o(i._ZNSt12length_errorD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt12length_error)
 <LI><a href="#[95]">std::length_error::~length_error()</a> from rwthrowproc_impl.o(i._ZNSt12length_errorD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[cf]">std::out_of_range::~out_of_range__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt12out_of_rangeD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt12out_of_range)
 <LI><a href="#[96]">std::out_of_range::~out_of_range()</a> from rwthrowproc_impl.o(i._ZNSt12out_of_rangeD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt12out_of_range)
 <LI><a href="#[96]">std::out_of_range::~out_of_range()</a> from rwthrowproc_impl.o(i._ZNSt12out_of_rangeD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[d0]">std::bad_exception::~bad_exception__deallocating()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD0Ev) referenced from bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
 <LI><a href="#[7b]">std::bad_exception::~bad_exception()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev) referenced from bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
 <LI><a href="#[7b]">std::bad_exception::~bad_exception()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev) referenced from arm_exceptions_callunex.o(.text)
 <LI><a href="#[7b]">std::bad_exception::~bad_exception()</a> from bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[d1]">std::runtime_error::~runtime_error__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt13runtime_errorD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt13runtime_error)
 <LI><a href="#[97]">std::runtime_error::~runtime_error()</a> from rwthrowproc_impl.o(i._ZNSt13runtime_errorD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt13runtime_error)
 <LI><a href="#[97]">std::runtime_error::~runtime_error()</a> from rwthrowproc_impl.o(i._ZNSt13runtime_errorD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[d3]">std::__rw_exception::~__rw_exception__deallocating()</a> from rwstdexcept.o(i._ZNSt14__rw_exceptionD0Ev) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[d2]">std::__rw_exception::~__rw_exception()</a> from rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[d5]">std::collate_byname&lang;char&rang;::~collate_byname__deallocating()</a> from char.o(i._ZNSt14collate_bynameIcED0Ev) referenced from char.o(.constdata__ZTVSt14collate_bynameIcE)
 <LI><a href="#[d4]">std::collate_byname&lang;char&rang;::~collate_byname()</a> from char.o(i._ZNSt14collate_bynameIcED1Ev) referenced from char.o(.constdata__ZTVSt14collate_bynameIcE)
 <LI><a href="#[d9]">std::overflow_error::~overflow_error__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt14overflow_errorD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt14overflow_error)
 <LI><a href="#[99]">std::overflow_error::~overflow_error()</a> from rwthrowproc_impl.o(i._ZNSt14overflow_errorD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt14overflow_error)
 <LI><a href="#[99]">std::overflow_error::~overflow_error()</a> from rwthrowproc_impl.o(i._ZNSt14overflow_errorD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[da]">std::underflow_error::~underflow_error__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt15underflow_errorD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt15underflow_error)
 <LI><a href="#[9a]">std::underflow_error::~underflow_error()</a> from rwthrowproc_impl.o(i._ZNSt15underflow_errorD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt15underflow_error)
 <LI><a href="#[9a]">std::underflow_error::~underflow_error()</a> from rwthrowproc_impl.o(i._ZNSt15underflow_errorD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[db]">std::invalid_argument::~invalid_argument__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt16invalid_argumentD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt16invalid_argument)
 <LI><a href="#[94]">std::invalid_argument::~invalid_argument()</a> from rwthrowproc_impl.o(i._ZNSt16invalid_argumentD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVSt16invalid_argument)
 <LI><a href="#[94]">std::invalid_argument::~invalid_argument()</a> from rwthrowproc_impl.o(i._ZNSt16invalid_argumentD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[ac]">std::__rw_open_cat_data::__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataC1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[ab]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[ab]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
 <LI><a href="#[c8]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[c8]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[dd]">std::ctype&lang;char&rang;::~ctype__deallocating()</a> from char.o(i._ZNSt5ctypeIcED0Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[dc]">std::ctype&lang;char&rang;::~ctype()</a> from char.o(i._ZNSt5ctypeIcED1Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[bc]">std::locale::facet::~facet__deallocating()</a> from rwstdexcept.o(i._ZNSt6locale5facetD0Ev) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[a2]">std::locale::~locale()</a> from locale.o(i._ZNSt6localeD1Ev) referenced from locale.o(i._ZNSt6locale7classicEv)
 <LI><a href="#[de]">std::bad_cast::~bad_cast__deallocating()</a> from bad_cast.o(i._ZNSt8bad_castD0Ev) referenced from bad_cast.o(.constdata__ZTVSt8bad_cast)
 <LI><a href="#[91]">std::bad_cast::~bad_cast()</a> from bad_cast.o(i._ZNSt8bad_castD1Ev) referenced from bad_cast.o(.constdata__ZTVSt8bad_cast)
 <LI><a href="#[91]">std::bad_cast::~bad_cast()</a> from bad_cast.o(i._ZNSt8bad_castD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[be]">std::ios_base::badbit_set::~badbit_set__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base10badbit_setD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10badbit_setE)
 <LI><a href="#[9c]">std::ios_base::badbit_set::~badbit_set()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base10badbit_setD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10badbit_setE)
 <LI><a href="#[9c]">std::ios_base::badbit_set::~badbit_set()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base10badbit_setD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[c0]">std::ios_base::eofbit_set::~eofbit_set__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base10eofbit_setD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10eofbit_setE)
 <LI><a href="#[9d]">std::ios_base::eofbit_set::~eofbit_set()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base10eofbit_setD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10eofbit_setE)
 <LI><a href="#[9d]">std::ios_base::eofbit_set::~eofbit_set()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base10eofbit_setD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[c1]">std::ios_base::failbit_set::~failbit_set__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base11failbit_setD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base11failbit_setE)
 <LI><a href="#[9b]">std::ios_base::failbit_set::~failbit_set()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base11failbit_setD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base11failbit_setE)
 <LI><a href="#[9b]">std::ios_base::failbit_set::~failbit_set()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base11failbit_setD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[c2]">std::ios_base::failure::~failure__deallocating()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base7failureD0Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base7failureE)
 <LI><a href="#[9e]">std::ios_base::failure::~failure()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base7failureD1Ev) referenced from rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base7failureE)
 <LI><a href="#[9e]">std::ios_base::failure::~failure()</a> from rwthrowproc_impl.o(i._ZNSt8ios_base7failureD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[e0]">std::messages&lang;char&rang;::~messages__deallocating()</a> from rwstdexcept.o(i._ZNSt8messagesIcED0Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[df]">std::messages&lang;char&rang;::~messages()</a> from rwstdexcept.o(i._ZNSt8messagesIcED1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[e3]">std::bad_alloc::~bad_alloc__deallocating()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD0Ev) referenced from bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
 <LI><a href="#[8c]">std::bad_alloc::~bad_alloc()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev) referenced from bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
 <LI><a href="#[8c]">std::bad_alloc::~bad_alloc()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev) referenced from newhandler.o(i._Z21__default_new_handlerv)
 <LI><a href="#[8c]">std::bad_alloc::~bad_alloc()</a> from bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[b]">std::exception::~exception()</a> from exception_dtor.o(i._ZNSt9exceptionD1Ev) referenced from exception_dtor.o(.constdata__ZTVSt9exception)
 <LI><a href="#[b]">std::exception::~exception()</a> from exception_dtor.o(i._ZNSt9exceptionD1Ev) referenced from rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
 <LI><a href="#[a5]">operator delete[] (void*)</a> from array_del.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[83]">__aeabi_unwind_cpp_pr0</a> from unwind_pr0.o(.text) referenced from unwinder.o(.text)
 <LI><a href="#[84]">__aeabi_unwind_cpp_pr1</a> from unwind_pr1.o(.text) referenced from unwinder.o(.text)
 <LI><a href="#[81]">__cxa_call_unexpected</a> from arm_exceptions_callunex.o(.text) referenced from unwind_prcommon.o(.text)
 <LI><a href="#[ae]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from device.o(.constdata__ZTV10deviceBase)
 <LI><a href="#[ae]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from icm20602.o(.constdata__ZTV6deviceI9threeAxishE)
 <LI><a href="#[ea]">__main</a> from __main.o(!!!main) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[e7]">__sti___10_locale_cpp_ff99fc7b</a> from locale.o(i.__sti___10_locale_cpp_ff99fc7b) referenced from locale.o(.init_array)
 <LI><a href="#[e8]">__sti___10_rwcats_cpp_64e8068e</a> from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e) referenced from rwcats.o(.init_array)
 <LI><a href="#[e4]">__sti___12_ICM20602_cpp_00915af1</a> from icm20602.o(i.__sti___12_ICM20602_cpp_00915af1) referenced from icm20602.o(.init_array)
 <LI><a href="#[e5]">__sti___21_calculateAttitude_cpp_initAHRS</a> from calculateattitude.o(i.__sti___21_calculateAttitude_cpp_initAHRS) referenced from calculateattitude.o(.init_array)
 <LI><a href="#[e6]">__sti___8_char_cpp_a3dc957a</a> from char.o(i.__sti___8_char_cpp_a3dc957a) referenced from char.o(.init_array)
 <LI><a href="#[88]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[7d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[87]">_sbackspace</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[89]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[86]">_sgetc</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[85]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[7a]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[8a]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[ea]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ec]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ee]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[366]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[367]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ef]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[368]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[f0]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[13a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[f2]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[f4]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f6]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f7]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f8]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[369]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[fa]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fc]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fe]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[100]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[102]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[104]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[105]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[106]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[108]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[36a]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[10a]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[10c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[10e]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[110]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[36b]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[125]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[112]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[114]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[36c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[36d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[116]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[36e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[36f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_collate_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_collate_2 &rArr; _get_lc_collate
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate
</UL>

<P><STRONG><a name="[370]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[371]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_monetary_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_monetary_2 &rArr; _get_lc_monetary
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary
</UL>

<P><STRONG><a name="[372]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[373]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[374]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[375]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[376]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[377]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[378]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[379]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[37a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[37b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[37c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[37d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[37e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[37f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[12a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[120]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[380]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[381]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[382]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[383]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[384]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[385]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[386]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[ed]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[387]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[122]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[124]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[388]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[126]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; [local to main_cpp]::running() &rArr;  [local to main_cpp]::running() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[389]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1a0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[129]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[38a]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[12b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[12d]"></a>__cxa_end_cleanup</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, arm_exceptions_cleanup.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>

<P><STRONG><a name="[14a]"></a>_Unwind_Activity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, unwind_activity.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[d]"></a>__ARM_Unwind_VRS_VFPpreserve_low</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>__ARM_Unwind_VRS_VFPpreserve_high</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>__ARM_Unwind_VRS_VFPrestore_low</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[10]"></a>__ARM_Unwind_VRS_VFPrestore_high</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)

<P><STRONG><a name="[180]"></a>__ARM_Unwind_VRS_corerestore</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, unwinder.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
</UL>

<P><STRONG><a name="[130]"></a>_Unwind_RaiseException</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, unwinder.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[12f]"></a>_Unwind_Resume</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, unwinder.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup
</UL>

<P><STRONG><a name="[1c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38b]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[38]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[18c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2d5]"></a>arm_mat_add_f32</STRONG> (Thumb, 256 bytes, Stack size 12 bytes, arm_mat_add_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[2ca]"></a>arm_mat_inverse_f32</STRONG> (Thumb, 1280 bytes, Stack size 64 bytes, arm_mat_inverse_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = arm_mat_inverse_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ~(const action_matrix&)
</UL>

<P><STRONG><a name="[2d2]"></a>arm_mat_mult_f32</STRONG> (Thumb, 242 bytes, Stack size 36 bytes, arm_mat_mult_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[2cd]"></a>arm_mat_scale_f32</STRONG> (Thumb, 198 bytes, Stack size 4 bytes, arm_mat_scale_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = arm_mat_scale_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(float, const action_matrix&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(const action_matrix&, float)
</UL>

<P><STRONG><a name="[2ce]"></a>arm_mat_sub_f32</STRONG> (Thumb, 256 bytes, Stack size 12 bytes, arm_mat_sub_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arm_mat_sub_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[2d3]"></a>arm_mat_trans_f32</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, arm_mat_trans_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_mat_trans_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !(const action_matrix&)
</UL>

<P><STRONG><a name="[305]"></a>arm_sin_cos_f32</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, arm_sin_cos_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePos
</UL>

<P><STRONG><a name="[21a]"></a>arm_mean_f32</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, arm_mean_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_mean_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(float*, unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(threeAxis*, unsigned)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::UpdateData()
</UL>

<P><STRONG><a name="[210]"></a>arm_std_f32</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, arm_std_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdData(threeAxis*, unsigned)
</UL>

<P><STRONG><a name="[133]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(float) const
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(unsigned) const
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(int) const
</UL>

<P><STRONG><a name="[fb]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[138]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_ICM20602_cpp_00915af1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_calculateAttitude_cpp_initAHRS
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[13e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[38c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::ICM20602_Gyro(SPI_TypeDef*, GPIO_TypeDef*, unsigned short)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>

<P><STRONG><a name="[38d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[140]"></a>__cxa_begin_cleanup</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arm_exceptions_cleanup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_cleanup &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[12e]"></a>__ARM_cxa_end_cleanup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, arm_exceptions_cleanup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup
</UL>

<P><STRONG><a name="[146]"></a>__cxa_allocate_exception</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arm_exceptions_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(float, const action_matrix&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(float, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ~(const action_matrix&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr(const action_matrix&)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[149]"></a>__cxa_rethrow</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arm_exceptions_rethrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;const action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
</UL>

<P><STRONG><a name="[148]"></a>__ARM::call_terminate_handler(_Unwind_Control_Block*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, arm_exceptions_callterm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[14b]"></a>__cxa_call_terminate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arm_exceptions_callterm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_noexcept_landing
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[81]"></a>__cxa_call_unexpected</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, arm_exceptions_callunex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = __cxa_call_unexpected &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception(const std::bad_exception&)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwind_prcommon.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>__cxa_begin_catch</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, arm_exceptions_begincatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;const action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(const char*, std::__va_list)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
</UL>

<P><STRONG><a name="[153]"></a>__cxa_throw</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arm_exceptions_throw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(float, const action_matrix&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(float, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ~(const action_matrix&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr(const action_matrix&)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[14f]"></a>__cxa_type_match</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, arm_exceptions_throw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator !=(const std::type_info&) const
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[14e]"></a>__cxa_end_catch</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, arm_exceptions_endcatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxa_end_catch &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_DeleteException
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(const char*, std::__va_list)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_unwind_cpp_pr1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwind_pr1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = __aeabi_unwind_cpp_pr1 &rArr; __ARM_unwind_cpp_prcommon &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwinder.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, unwind_pr0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = __aeabi_unwind_cpp_pr0 &rArr; __ARM_unwind_cpp_prcommon &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwinder.o(.text)
</UL>
<P><STRONG><a name="[2d4]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[13d]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[13c]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>

<P><STRONG><a name="[15c]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[15d]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[15f]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[137]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[391]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[134]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[7a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[16b]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[344]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[16e]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[392]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[147]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[173]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>

<P><STRONG><a name="[172]"></a>__ARM::same_exceptions_class(const void*, const void*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arm_exceptions_support.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>

<P><STRONG><a name="[142]"></a>__ARM::is_foreign_exception(_Unwind_Control_Block*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arm_exceptions_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::same_exceptions_class(const void*, const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
</UL>

<P><STRONG><a name="[145]"></a>__cxa_free_exception</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, arm_exceptions_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_free_exception &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
</UL>

<P><STRONG><a name="[144]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::default_unexpected_handler()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
</UL>

<P><STRONG><a name="[141]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_cxa_end_cleanup
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>

<P><STRONG><a name="[176]"></a>__cxa_bad_typeid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, arm_exceptions_bad_typeid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __cxa_bad_typeid &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid(const std::bad_typeid&)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
</UL>

<P><STRONG><a name="[14d]"></a>std::unexpected()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_unexpected.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::unexpected() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[7e]"></a>__ARM::default_unexpected_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_exceptions_unexpected.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __ARM::default_unexpected_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_foreign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::same_exceptions_class(const void*, const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
</UL>

<P><STRONG><a name="[159]"></a>__ARM_unwind_cpp_prcommon</STRONG> (Thumb, 1474 bytes, Stack size 96 bytes, unwind_prcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = __ARM_unwind_cpp_prcommon &rArr; __cxa_type_match &rArr; __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwind_pr_c]::next_unwind_byte(uwdata*)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr0
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr1
</UL>

<P><STRONG><a name="[17a]"></a>_Unwind_VRS_Set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Unwind_VRS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[179]"></a>_Unwind_VRS_Get</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Unwind_VRS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[17c]"></a>_Unwind_VRS_Pop</STRONG> (Thumb, 272 bytes, Stack size 288 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _Unwind_VRS_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[17f]"></a>__ARM_unwind_next_frame</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_VRS_corerestore
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>

<P><STRONG><a name="[131]"></a>__ARM_Unwind_RaiseException</STRONG> (Thumb, 206 bytes, Stack size 352 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[132]"></a>__ARM_Unwind_Resume</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, unwinder.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_VRS_corerestore
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>

<P><STRONG><a name="[154]"></a>_Unwind_Complete</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _Unwind_Complete &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>

<P><STRONG><a name="[158]"></a>_Unwind_DeleteException</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, unwind_delete.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[393]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[394]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[117]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strxfrm
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_mixed
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lconv
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[175]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[395]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[182]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[115]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[184]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[14]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[185]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[16a]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[186]"></a>sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[163]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[174]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Complete
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_Resume
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[17e]"></a>bsearch</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bsearch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)
</UL>

<P><STRONG><a name="[16d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[16c]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[297]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(const char*, std::__va_list)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_base::_C_get_named_init_(const char*)
</UL>

<P><STRONG><a name="[240]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[1a7]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(const char*, std::__va_list)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strxfrm
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_parse_name(__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;&, const char*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_base::_C_get_named_init_(const char*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const __rw::__rw_locale_imp&, const char*, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[2b7]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[399]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[170]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[39b]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[123]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[18d]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[181]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[160]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[161]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[135]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[136]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[18e]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[f1]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[85]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[18f]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[103]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[191]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ff]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[107]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[192]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[101]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[109]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[f3]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[193]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[195]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1ad]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[187]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[86]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[197]"></a>_scanf_mbtowc</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[199]"></a>_scanf_wctomb</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[19b]"></a>_scanf_wstring</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[19c]"></a>setlocale</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, locale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_parse_name(__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;&, const char*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::global(const std::locale&)
</UL>

<P><STRONG><a name="[19e]"></a>localeconv</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, localeconv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lconv
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_base::_C_get_named_init_(const char*)
</UL>

<P><STRONG><a name="[128]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[189]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[188]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[183]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1a4]"></a>strcoll</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, strcoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcoll
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const
</UL>

<P><STRONG><a name="[1a6]"></a>strxfrm</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, strxfrm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = strxfrm &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const
</UL>

<P><STRONG><a name="[1a8]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const __rw::__rw_locale_imp&, const char*, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1a5]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const char*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1a1]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[39c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1a9]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1aa]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[10b]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[10d]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1ab]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[10f]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[111]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[194]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[196]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1b1]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[19a]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[19f]"></a>_get_lconv</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, _lconv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>

<P><STRONG><a name="[19d]"></a>_setlocale_r</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>

<P><STRONG><a name="[198]"></a>_mbrtowc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, _mbrtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[190]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1a3]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1b8]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[365]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[1b9]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[39f]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1bc]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[1bb]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[1bf]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1bd]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[1be]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[165]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1b0]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[166]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[1af]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1c0]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[20]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>CS_Config</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, spi.o(i.CS_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CS_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
</UL>

<P><STRONG><a name="[1ea]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
</UL>

<P><STRONG><a name="[1e7]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
</UL>

<P><STRONG><a name="[1f8]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
</UL>

<P><STRONG><a name="[1f7]"></a>DMA_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
</UL>

<P><STRONG><a name="[1e8]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
</UL>

<P><STRONG><a name="[1f9]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
</UL>

<P><STRONG><a name="[23]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>Delay_ms</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, timer.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[1c8]"></a>Delay_us</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timer.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[1c5]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Config
</UL>

<P><STRONG><a name="[1cb]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[1d4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_OnlyRead
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MultiRead
</UL>

<P><STRONG><a name="[1c6]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_OnlyRead
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MultiRead
</UL>

<P><STRONG><a name="[1e]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e4]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[30d]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c4]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Config
</UL>

<P><STRONG><a name="[1d0]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[1d2]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[1ca]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[1d1]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[1f4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1c9]"></a>SPI1_Init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, spi.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI1_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>SPI2_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, spi.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI2_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ce]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_OnlyRead
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MultiRead
</UL>

<P><STRONG><a name="[1cc]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[1d5]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_OnlyRead
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MultiRead
</UL>

<P><STRONG><a name="[1d7]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_OnlyRead
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MultiRead
</UL>

<P><STRONG><a name="[1d6]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MultiRead
</UL>

<P><STRONG><a name="[1cd]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[1d3]"></a>SPI_MultiRead</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, spi.o(i.SPI_MultiRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_MultiRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::multiRead(unsigned char, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1d8]"></a>SPI_OnlyRead</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, spi.o(i.SPI_OnlyRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_OnlyRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEncoder
</UL>

<P><STRONG><a name="[1da]"></a>SPI_Read</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, spi.o(i.SPI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::rawDataRead(unsigned char)
</UL>

<P><STRONG><a name="[1db]"></a>SPI_Write</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, spi.o(i.SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::rawDataWrite(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[22]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a0]"></a>SetCmdState</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, user.o(i.SetCmdState), UNUSED)

<P><STRONG><a name="[25]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, timer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM7_IRQHandler &rArr; UpdateEncoder &rArr; SPI_OnlyRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getICM20602_Gyro()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEncoder
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1de]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[1dd]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[1e3]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[1e1]"></a>TIM_Init</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, timer.o(i.TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e2]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
</UL>

<P><STRONG><a name="[1e6]"></a>USART1_INIT</STRONG> (Thumb, 304 bytes, Stack size 96 bytes, usart.o(i.USART1_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USART1_INIT &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>USART1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART1_IRQHandler &rArr; usartCmdInput &rArr; [local to user_cpp]::usartACCT(unsigned char, unsigned short&) &rArr; resetAttitude &rArr; action_matrix::operator =(const action_matrix&) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usartCmdInput
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1ed]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[1f1]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1ef]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
</UL>

<P><STRONG><a name="[1ee]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
</UL>

<P><STRONG><a name="[1f0]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[1ec]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
</UL>

<P><STRONG><a name="[1eb]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
</UL>

<P><STRONG><a name="[1f2]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1f5]"></a>USART_SendData</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_usart.o(i.USART_SendData), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>

<P><STRONG><a name="[1f6]"></a>USART_SendDataToDMA</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, usart.o(i.USART_SendDataToDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_SendDataToDMA &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(float) const
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(char) const
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(const char*) const
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(unsigned) const
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(int) const
</UL>

<P><STRONG><a name="[1e0]"></a>UpdateEncoder</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pos.o(i.UpdateEncoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UpdateEncoder &rArr; SPI_OnlyRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_OnlyRead
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[21]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[248]"></a>getADXRS453()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, adxrs453.o(i._Z11getADXRS453v))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getADXRS453()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
</UL>

<P><STRONG><a name="[249]"></a>getI3G4250D()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, i3g4250d.o(i._Z11getI3G4250Dv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getI3G4250D()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
</UL>

<P><STRONG><a name="[252]"></a>getUsartOut()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._Z11getUsartOutv))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[1fa]"></a>encoderMagFix(threeAxis&)</STRONG> (Thumb, 758 bytes, Stack size 16 bytes, pos.o(i._Z13encoderMagFixR9threeAxis))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = encoderMagFix(threeAxis&) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[303]"></a>getEulerAngle()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, calculateattitude.o(i._Z13getEulerAnglev))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePos
</UL>

<P><STRONG><a name="[1fd]"></a>getTransMatrix(const action_matrix&)</STRONG> (Thumb, 798 bytes, Stack size 24 bytes, attitudeangle.o(i._Z14getTransMatrixRK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = getTransMatrix(const action_matrix&) &rArr; action_matrix::action_matrix(unsigned, unsigned, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFmeasure(const action_matrix&)
</UL>

<P><STRONG><a name="[1df]"></a>getICM20602_Gyro()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, icm20602.o(i._Z16getICM20602_Gyrov))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[246]"></a>getLSM303AGR_Acc()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, lsm303agr.o(i._Z16getLSM303AGR_Accv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getLSM303AGR_Acc()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
</UL>

<P><STRONG><a name="[247]"></a>getLSM303AGR_Mag()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, lsm303agr.o(i._Z16getLSM303AGR_Magv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getLSM303AGR_Mag()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
</UL>

<P><STRONG><a name="[a4]"></a>__default_new_handler()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, newhandler.o(i._Z21__default_new_handlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc(const std::bad_alloc&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[201]"></a>tr(const action_matrix&)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, action_matrix.o(i._Z2trRK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = tr(const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_data(unsigned, unsigned) const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
</UL>

<P><STRONG><a name="[205]"></a>abs(threeAxis)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, calculateattitude.o(i._Z3abs9threeAxis))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = abs(threeAxis) &rArr; std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[207]"></a>abs(const action_matrix&)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, action_matrix.o(i._Z3absRK13action_matrix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[209]"></a>catgets(__rw::__rw_cat*, int, int, const char*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rwcats.o(i._Z7catgetsPN4__rw8__rw_catEiiPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = catgets(__rw::__rw_cat*, int, int, const char*) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
</UL>

<P><STRONG><a name="[20b]"></a>catopen(const char*, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rwcats.o(i._Z7catopenPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = catopen(const char*, int) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[20e]"></a>stdData(threeAxis*, unsigned)</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, signalprocess.o(i._Z7stdDataP9threeAxisj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stdData(threeAxis*, unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_std_f32
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
</UL>

<P><STRONG><a name="[211]"></a>catclose(__rw::__rw_cat*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rwcats.o(i._Z8catclosePN4__rw8__rw_catE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_close(int) const
</UL>

<P><STRONG><a name="[212]"></a>integral(const action_matrix&, const action_matrix&, float)</STRONG> (Thumb, 854 bytes, Stack size 88 bytes, attitudeangle.o(i._Z8integralRK13action_matrixS1_f))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = integral(const action_matrix&, const action_matrix&, float) &rArr; operator +(const action_matrix&, const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(float, const action_matrix&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFpre(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[219]"></a>meanData(threeAxis*, unsigned)</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, signalprocess.o(i._Z8meanDataP9threeAxisj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = meanData(threeAxis*, unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mean_f32
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::UpdateData()
</UL>

<P><STRONG><a name="[21b]"></a>meanData(float*, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adxrs453.o(i._Z8meanDataPfj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = meanData(float*, unsigned) &rArr; arm_mean_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mean_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceADXRS453::UpdateData()
</UL>

<P><STRONG><a name="[21c]"></a>AHRS_Init()</STRONG> (Thumb, 514 bytes, Stack size 536 bytes, ahrs.o(i._Z9AHRS_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = AHRS_Init() &rArr; meanData(threeAxis*, unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(threeAxis, float)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeFlag
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdState
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getICM20602_Gyro()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mean_f32
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(threeAxis*, unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;float*&rang;(T1, unsigned)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;threeAxis*&rang;(T1, unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeAxis::operator =(float)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeAxis::operator =(const threeAxis&)
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
</UL>

<P><STRONG><a name="[30e]"></a>deviceBase::devicesAllInit()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, device.o(i._ZN10deviceBase14devicesAllInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = deviceBase::devicesAllInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a1]"></a>deviceBase::devicesAllUpdate()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, device.o(i._ZN10deviceBase16devicesAllUpdateEv), UNUSED)

<P><STRONG><a name="[230]"></a>deviceBase::deviceBase__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, device.o(i._ZN10deviceBaseC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::ICM20602_Gyro(SPI_TypeDef*, GPIO_TypeDef*, unsigned short)
</UL>

<P><STRONG><a name="[b0]"></a>deviceBase::~deviceBase__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, device.o(i._ZN10deviceBaseD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = deviceBase::~deviceBase__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceBase::~deviceBase__sub_object()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV10deviceBase)
</UL>
<P><STRONG><a name="[af]"></a>deviceBase::~deviceBase__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, device.o(i._ZN10deviceBaseD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceBase::~deviceBase__deallocating()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device&lang;threeAxis, unsigned char&rang;::~device__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device.o(.constdata__ZTV10deviceBase)
</UL>
<P><STRONG><a name="[b2]"></a>ICM20602_Gyro::UpdateData()</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, icm20602.o(i._ZN13ICM20602_Gyro10UpdateDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ICM20602_Gyro::UpdateData() &rArr; meanData(threeAxis*, unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mean_f32
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(threeAxis*, unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;float*&rang;(T1, unsigned)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;threeAxis*&rang;(T1, unsigned)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeAxis::operator =(const threeAxis&)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::multiRead(unsigned char, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm20602.o(.constdata__ZTV13ICM20602_Gyro)
</UL>
<P><STRONG><a name="[b4]"></a>ICM20602_Gyro::rawDataRead(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, icm20602.o(i._ZN13ICM20602_Gyro11rawDataReadEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ICM20602_Gyro::rawDataRead(unsigned char) &rArr; [local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm20602.o(.constdata__ZTV13ICM20602_Gyro)
</UL>
<P><STRONG><a name="[b5]"></a>ICM20602_Gyro::rawDataWrite(unsigned char, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, icm20602.o(i._ZN13ICM20602_Gyro12rawDataWriteEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM20602_Gyro::rawDataWrite(unsigned char, unsigned char) &rArr; [local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm20602.o(.constdata__ZTV13ICM20602_Gyro)
</UL>
<P><STRONG><a name="[8b]"></a>ICM20602_Gyro::getInstanceNum()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20602.o(i._ZN13ICM20602_Gyro14getInstanceNumEv))
<BR>[Address Reference Count : 3]<UL><LI> main.o(i._ZN25_INTERNAL_8_main_cpp_main7runningEv)
<LI> timer.o(i.TIM7_IRQHandler)
<LI> ahrs.o(i._Z9AHRS_Initv)
</UL>
<P><STRONG><a name="[b1]"></a>ICM20602_Gyro::init()</STRONG> (Thumb, 526 bytes, Stack size 72 bytes, icm20602.o(i._ZN13ICM20602_Gyro4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = ICM20602_Gyro::init() &rArr; std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::operator [](const unsigned char&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_node(const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::operator [](const unsigned char&)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;::allocator()
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator -&rang;() const
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator !=&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned char&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++(int)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~map()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm20602.o(.constdata__ZTV13ICM20602_Gyro)
</UL>
<P><STRONG><a name="[224]"></a>ICM20602_Gyro::multiRead(unsigned char, unsigned char*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, icm20602.o(i._ZN13ICM20602_Gyro9multiReadEhPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ICM20602_Gyro::multiRead(unsigned char, unsigned char*, unsigned) &rArr; [local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MultiRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::UpdateData()
</UL>

<P><STRONG><a name="[22f]"></a>ICM20602_Gyro::ICM20602_Gyro(SPI_TypeDef*, GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, icm20602.o(i._ZN13ICM20602_GyroC1EP11SPI_TypeDefP12GPIO_TypeDeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM20602_Gyro::ICM20602_Gyro(SPI_TypeDef*, GPIO_TypeDef*, unsigned short) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceBase::deviceBase__sub_object()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeAxis::operator =(float)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_ICM20602_cpp_00915af1
</UL>

<P><STRONG><a name="[3a2]"></a>ICM20602_Gyro::ICM20602_Gyro__sub_object(SPI_TypeDef*, GPIO_TypeDef*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, icm20602.o(i._ZN13ICM20602_GyroC1EP11SPI_TypeDefP12GPIO_TypeDeft), UNUSED)

<P><STRONG><a name="[b3]"></a>ICM20602_Gyro::~ICM20602_Gyro__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icm20602.o(i._ZN13ICM20602_GyroD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ICM20602_Gyro::~ICM20602_Gyro__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::~ICM20602_Gyro()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm20602.o(.constdata__ZTV13ICM20602_Gyro)
</UL>
<P><STRONG><a name="[a9]"></a>ICM20602_Gyro::~ICM20602_Gyro()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, icm20602.o(i._ZN13ICM20602_GyroD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ICM20602_Gyro::~ICM20602_Gyro() &rArr; device&lang;threeAxis, unsigned char&rang;::~device__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device&lang;threeAxis, unsigned char&rang;::~device__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::~ICM20602_Gyro__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> icm20602.o(i.__sti___12_ICM20602_cpp_00915af1)
<LI> icm20602.o(.constdata__ZTV13ICM20602_Gyro)
</UL>
<P><STRONG><a name="[3a3]"></a>ICM20602_Gyro::~ICM20602_Gyro__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, icm20602.o(i._ZN13ICM20602_GyroD1Ev), UNUSED)

<P><STRONG><a name="[25a]"></a>action_matrix::action_matrix(const action_matrix&)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, action_matrix.o(i._ZN13action_matrixC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::construct(action_matrix*, const action_matrix&)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::filter(const action_matrix&, const action_matrix&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(float, const action_matrix&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(float, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[3a4]"></a>action_matrix::action_matrix__sub_object(const action_matrix&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, action_matrix.o(i._ZN13action_matrixC1ERKS_), UNUSED)

<P><STRONG><a name="[1c1]"></a>action_matrix::action_matrix(unsigned, unsigned, unsigned char)</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, action_matrix.o(i._ZN13action_matrixC1Ejjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = action_matrix::action_matrix(unsigned, unsigned, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::aukf9axis()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_calculateAttitude_cpp_initAHRS
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFmeasure(const action_matrix&)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransMatrix(const action_matrix&)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::AUKF(float, float, float, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, action_matrix(*)(const action_matrix&, const action_matrix&), action_matrix(*)(const action_matrix&), unsigned)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateM(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func5&rang;
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(float, const action_matrix&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !(const action_matrix&)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(float, const action_matrix&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(float, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(const action_matrix&, float)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ~(const action_matrix&)
</UL>

<P><STRONG><a name="[3a5]"></a>action_matrix::action_matrix__sub_object(unsigned, unsigned, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, action_matrix.o(i._ZN13action_matrixC1Ejjh), UNUSED)

<P><STRONG><a name="[8d]"></a>action_matrix::~action_matrix()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, action_matrix.o(i._ZN13action_matrixD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = action_matrix::~action_matrix() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::aukf9axis()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFpre(const action_matrix&, const action_matrix&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFmeasure(const action_matrix&)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::destroy(action_matrix*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::~AUKF()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(float, const action_matrix&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(float, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ~(const action_matrix&)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> attitudeangle.o(i._Z8integralRK13action_matrixS1_f)
<LI> adaptiveunscentedkalmanfilter.o(i._ZN4AUKFC1EfffRK13action_matrixS2_S2_S2_S2_PFS0_S2_S2_EPFS0_S2_Ej)
<LI> adaptiveunscentedkalmanfilter.o(i._ZN4AUKFD1Ev)
<LI> calculateattitude.o(i.__sti___21_calculateAttitude_cpp_initAHRS)
<LI> calculateattitude.o(i._ZN9aukf9axisC1Ev)
<LI> calculateattitude.o(i._ZN9aukf9axisD1Ev)
</UL>
<P><STRONG><a name="[3a6]"></a>action_matrix::~action_matrix__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, action_matrix.o(i._ZN13action_matrixD1Ev), UNUSED)

<P><STRONG><a name="[216]"></a>action_matrix::operator =(const action_matrix&)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, action_matrix.o(i._ZN13action_matrixaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = action_matrix::operator =(const action_matrix&) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAttitude
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFmeasure(const action_matrix&)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::copy&lang;const action_matrix*, action_matrix*&rang;(T1, T1, T2)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::AUKF(float, float, float, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, action_matrix(*)(const action_matrix&, const action_matrix&), action_matrix(*)(const action_matrix&), unsigned)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateM(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ~(const action_matrix&)
</UL>

<P><STRONG><a name="[231]"></a>action_matrix::operator =(float)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, action_matrix.o(i._ZN13action_matrixaSEf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[232]"></a>deviceADXRS453::UpdateData()</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, adxrs453.o(i._ZN14deviceADXRS45310UpdateDataEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(float*, unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;float*&rang;(T1, unsigned)
</UL>

<P><STRONG><a name="[24e]"></a>AUKF::unscentedTrans(const action_matrix&, const action_matrix&)</STRONG> (Thumb, 586 bytes, Stack size 88 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKF14unscentedTransERK13action_matrixS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = AUKF::unscentedTrans(const action_matrix&, const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&) &rArr; std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(const char*) const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUsartOut()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::allocator&lang;action_matrix&rang;&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::allocator()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
</UL>

<P><STRONG><a name="[255]"></a>AUKF::filter(const action_matrix&, const action_matrix&)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKF6filterERK13action_matrixS2_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
</UL>

<P><STRONG><a name="[25b]"></a>AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)</STRONG> (Thumb, 454 bytes, Stack size 128 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKF7updateCESt6vectorI13action_matrixSaIS1_EERKS1_S3_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&) &rArr; operator +(const action_matrix&, const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator [](unsigned)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::size() const
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !(const action_matrix&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(const action_matrix&, float)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
</UL>

<P><STRONG><a name="[25e]"></a>AUKF::updateM(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKF7updateMESt6vectorI13action_matrixSaIS1_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AUKF::updateM(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;) &rArr; action_matrix::action_matrix(unsigned, unsigned, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator [](unsigned)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
</UL>

<P><STRONG><a name="[256]"></a>AUKF::predictX(const action_matrix&)</STRONG> (Thumb, 348 bytes, Stack size 152 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKF8predictXERK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = AUKF::predictX(const action_matrix&) &rArr; AUKF::unscentedTrans(const action_matrix&, const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&) &rArr; std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::~vector()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::allocator&lang;action_matrix&rang;&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::allocator()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateM(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !(const action_matrix&)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::filter(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[257]"></a>AUKF::predictZ()</STRONG> (Thumb, 328 bytes, Stack size 112 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKF8predictZEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = AUKF::predictZ() &rArr; AUKF::unscentedTrans(const action_matrix&, const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&) &rArr; std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::~vector()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::allocator&lang;action_matrix&rang;&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::allocator()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateM(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::filter(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[258]"></a>AUKF::adaptiveR(const action_matrix&)</STRONG> (Thumb, 348 bytes, Stack size 112 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKF9adaptiveRERK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = AUKF::adaptiveR(const action_matrix&) &rArr; operator +(const action_matrix&, const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !(const action_matrix&)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(const action_matrix&, float)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr(const action_matrix&)
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::filter(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[259]"></a>AUKF::estimateX(const action_matrix&)</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKF9estimateXERK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = AUKF::estimateX(const action_matrix&) &rArr; operator +(const action_matrix&, const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !(const action_matrix&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ~(const action_matrix&)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::filter(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[265]"></a>AUKF::AUKF(float, float, float, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, action_matrix(*)(const action_matrix&, const action_matrix&), action_matrix(*)(const action_matrix&), unsigned)</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKFC1EfffRK13action_matrixS2_S2_S2_S2_PFS0_S2_S2_EPFS0_S2_Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = AUKF::AUKF(float, float, float, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, action_matrix(*)(const action_matrix&, const action_matrix&), action_matrix(*)(const action_matrix&), unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::aukf9axis()
</UL>

<P><STRONG><a name="[3a7]"></a>AUKF::AUKF__sub_object(float, float, float, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, action_matrix(*)(const action_matrix&, const action_matrix&), action_matrix(*)(const action_matrix&), unsigned)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKFC1EfffRK13action_matrixS2_S2_S2_S2_PFS0_S2_S2_EPFS0_S2_Ej), UNUSED)

<P><STRONG><a name="[b8]"></a>AUKF::~AUKF__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKFD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = AUKF::~AUKF__deallocating() &rArr; AUKF::~AUKF() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::~AUKF()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adaptiveunscentedkalmanfilter.o(.constdata__ZTV4AUKF)
</UL>
<P><STRONG><a name="[b7]"></a>AUKF::~AUKF()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKFD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = AUKF::~AUKF() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::~aukf9axis()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::~AUKF__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adaptiveunscentedkalmanfilter.o(.constdata__ZTV4AUKF)
</UL>
<P><STRONG><a name="[3a8]"></a>AUKF::~AUKF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, adaptiveunscentedkalmanfilter.o(i._ZN4AUKFD1Ev), UNUSED)

<P><STRONG><a name="[268]"></a>__rw::__rw_throw(int, ...)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rwstdexcept.o(i._ZN4__rw10__rw_throwEiz))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, unsigned, const std::allocator&lang;char&rang;&)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const char*, int)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const char*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::global(const std::locale&)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_base::_C_get_named_init_(const char*)
</UL>

<P><STRONG><a name="[26b]"></a>__rw::__rw_allocate(unsigned, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rwalloc.o(i._ZN4__rw13__rw_allocateEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>

<P><STRONG><a name="[26c]"></a>__rw::__rw_deallocate(void*, unsigned, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwalloc.o(i._ZN4__rw15__rw_deallocateEPvji))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::deallocate(action_matrix*, unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::deallocate(__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer*, unsigned)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_deallocate_buffers()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>

<P><STRONG><a name="[bd]"></a>__rw::__rw_facet_base::_C_initfacet(const std::locale&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale))
<BR>[Address Reference Count : 3]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
<LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
<LI> char.o(.constdata__ZTVSt14collate_bynameIcE)
</UL>
<P><STRONG><a name="[26d]"></a>__rw::__rw_locale_imp::_C_parse_name(__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;&, const char*)</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, vendor.o(i._ZN4__rw15__rw_locale_imp13_C_parse_nameERNS_18__rw_locale_vectorISsEEPKc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const char*, int)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const char*)
</UL>

<P><STRONG><a name="[2bf]"></a>__rw::__rw_locale_imp::_C_map_category(int)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, vendor.o(i._ZN4__rw15__rw_locale_imp15_C_map_categoryEi), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const std::locale&, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const char*, int)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_remove_facets(int)
</UL>

<P><STRONG><a name="[271]"></a>__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const char*)
</UL>

<P><STRONG><a name="[3a9]"></a>__rw::__rw_locale_imp::__rw_locale_imp__sub_object(const char*, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj), UNUSED)

<P><STRONG><a name="[273]"></a>__rw::__rw_locale_imp::__rw_locale_imp(const __rw::__rw_locale_imp&, const char*, unsigned)</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1ERKS0_PKcj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const std::locale&, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const char*, int)
</UL>

<P><STRONG><a name="[3aa]"></a>__rw::__rw_locale_imp::__rw_locale_imp__sub_object(const __rw::__rw_locale_imp&, const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1ERKS0_PKcj), UNUSED)

<P><STRONG><a name="[274]"></a>__rw::__rw_locale_imp::~__rw_locale_imp()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const char*)
</UL>

<P><STRONG><a name="[3ab]"></a>__rw::__rw_locale_imp::~__rw_locale_imp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev), UNUSED)

<P><STRONG><a name="[277]"></a>__rw::__rw_punct_data&lang;char&rang;::~__rw_punct_data()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(i._ZN4__rw15__rw_punct_dataIcED1Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_data&lang;char&rang;::~__rw_numpunct_impl_data()
</UL>

<P><STRONG><a name="[3ac]"></a>__rw::__rw_punct_data&lang;char&rang;::~__rw_punct_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZN4__rw15__rw_punct_dataIcED1Ev), UNUSED)

<P><STRONG><a name="[278]"></a>__rw::__rw_numpunct_impl&lang;char&rang;::~__rw_numpunct_impl()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, char.o(i._ZN4__rw18__rw_numpunct_implIcED1Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_data&lang;char&rang;::~__rw_numpunct_impl_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::numpunct&lang;char&rang;::~numpunct()
</UL>

<P><STRONG><a name="[3ad]"></a>__rw::__rw_numpunct_impl&lang;char&rang;::~__rw_numpunct_impl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZN4__rw18__rw_numpunct_implIcED1Ev), UNUSED)

<P><STRONG><a name="[e9]"></a>__rw::__rw_throw_exception(int, char*)</STRONG> (Thumb, 742 bytes, Stack size 136 bytes, rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw_exception(int, char*) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception(const std::bad_exception&)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception()
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc(const std::bad_alloc&)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_cast::~bad_cast()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_cast::bad_cast()
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_cast::bad_cast(const std::bad_cast&)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::failure(const std::ios_base::failure&)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::failure(const char*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failbit_set::failbit_set(const std::ios_base::failbit_set&)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::eofbit_set::eofbit_set(const std::ios_base::eofbit_set&)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::badbit_set::badbit_set(const std::ios_base::badbit_set&)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::invalid_argument::invalid_argument(const std::invalid_argument&)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::invalid_argument::invalid_argument(const char*)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::underflow_error::underflow_error(const std::underflow_error&)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::underflow_error::underflow_error(const char*)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::overflow_error::overflow_error(const std::overflow_error&)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::overflow_error::overflow_error(const char*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const std::runtime_error&)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const char*)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::out_of_range::out_of_range(const std::out_of_range&)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::out_of_range::out_of_range(const char*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::length_error::length_error(const std::length_error&)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::length_error::length_error(const char*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::domain_error::domain_error(const std::domain_error&)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::domain_error::domain_error(const char*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::range_error::range_error(const std::range_error&)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::range_error::range_error(const char*)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const std::logic_error&)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc.o(.data)
</UL>
<P><STRONG><a name="[296]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_base::_C_get_named_init_(const char*)
</UL>

<P><STRONG><a name="[3ae]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale__sub_object(const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci), UNUSED)

<P><STRONG><a name="[298]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale() &rArr; setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_base::_C_get_named_init_(const char*)
</UL>

<P><STRONG><a name="[3af]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev), UNUSED)

<P><STRONG><a name="[299]"></a>__rw::__rw_numpunct_impl_base::_C_get_named_init_(const char*)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw23__rw_numpunct_impl_base18_C_get_named_init_EPKc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localeconv
</UL>

<P><STRONG><a name="[279]"></a>__rw::__rw_numpunct_impl_data&lang;char&rang;::~__rw_numpunct_impl_data()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, char.o(i._ZN4__rw23__rw_numpunct_impl_dataIcED1Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_punct_data&lang;char&rang;::~__rw_punct_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl&lang;char&rang;::~__rw_numpunct_impl()
</UL>

<P><STRONG><a name="[3b0]"></a>__rw::__rw_numpunct_impl_data&lang;char&rang;::~__rw_numpunct_impl_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZN4__rw23__rw_numpunct_impl_dataIcED1Ev), UNUSED)

<P><STRONG><a name="[20a]"></a>__rw::__catfind(__rw::__rw_cat*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rwcats.o(i._ZN4__rw9__catfindEPNS_8__rw_catE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catclose(__rw::__rw_cat*)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
</UL>

<P><STRONG><a name="[29a]"></a>aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, calculateattitude.o(i._ZN9aukf9axis4fuseERK13action_matrixS2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176 + Unknown Stack Size
<LI>Call Chain = aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&) &rArr; AUKF::predictX(const action_matrix&) &rArr; AUKF::unscentedTrans(const action_matrix&, const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&) &rArr; std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdState
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
</UL>

<P><STRONG><a name="[29b]"></a>aukf9axis::aukf9axis()</STRONG> (Thumb, 200 bytes, Stack size 120 bytes, calculateattitude.o(i._ZN9aukf9axisC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = aukf9axis::aukf9axis() &rArr; AUKF::AUKF(float, float, float, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, action_matrix(*)(const action_matrix&, const action_matrix&), action_matrix(*)(const action_matrix&), unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::AUKF(float, float, float, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, action_matrix(*)(const action_matrix&, const action_matrix&), action_matrix(*)(const action_matrix&), unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___21_calculateAttitude_cpp_initAHRS
</UL>

<P><STRONG><a name="[3b1]"></a>aukf9axis::aukf9axis__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 120 bytes, calculateattitude.o(i._ZN9aukf9axisC1Ev), UNUSED)

<P><STRONG><a name="[bb]"></a>aukf9axis::~aukf9axis__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, calculateattitude.o(i._ZN9aukf9axisD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = aukf9axis::~aukf9axis__deallocating() &rArr; aukf9axis::~aukf9axis() &rArr; AUKF::~AUKF() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::~aukf9axis()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calculateattitude.o(.constdata__ZTV9aukf9axis)
</UL>
<P><STRONG><a name="[aa]"></a>aukf9axis::~aukf9axis()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, calculateattitude.o(i._ZN9aukf9axisD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = aukf9axis::~aukf9axis() &rArr; AUKF::~AUKF() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::~AUKF()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::~aukf9axis__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> calculateattitude.o(i.__sti___21_calculateAttitude_cpp_initAHRS)
<LI> calculateattitude.o(.constdata__ZTV9aukf9axis)
</UL>
<P><STRONG><a name="[3b2]"></a>aukf9axis::~aukf9axis__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, calculateattitude.o(i._ZN9aukf9axisD1Ev), UNUSED)

<P><STRONG><a name="[21f]"></a>threeAxis::operator =(const threeAxis&)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, icm20602.o(i._ZN9threeAxisaSERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;threeAxis*&rang;(T1, unsigned)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::UpdateData()
</UL>

<P><STRONG><a name="[21d]"></a>threeAxis::operator =(float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icm20602.o(i._ZN9threeAxisaSEf))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::ICM20602_Gyro(SPI_TypeDef*, GPIO_TypeDef*, unsigned short)
</UL>

<P><STRONG><a name="[253]"></a>_out_stream::operator &lang;&lang;(const char*) const</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(i._ZNK11_out_streamlsEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _out_stream::operator &lang;&lang;(const char*) const &rArr; USART_SendDataToDMA &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[29c]"></a>_out_stream::operator &lang;&lang;(char) const</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, usart.o(i._ZNK11_out_streamlsEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _out_stream::operator &lang;&lang;(char) const &rArr; USART_SendDataToDMA &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
</UL>

<P><STRONG><a name="[29d]"></a>_out_stream::operator &lang;&lang;(float) const</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, usart.o(i._ZNK11_out_streamlsEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _out_stream::operator &lang;&lang;(float) const &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
</UL>

<P><STRONG><a name="[29f]"></a>_out_stream::operator &lang;&lang;(int) const</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, usart.o(i._ZNK11_out_streamlsEi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2a0]"></a>_out_stream::operator &lang;&lang;(unsigned) const</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, usart.o(i._ZNK11_out_streamlsEj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataToDMA
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[202]"></a>action_matrix::get_column() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, action_matrix.o(i._ZNK13action_matrix10get_columnEv))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateM(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(float, const action_matrix&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !(const action_matrix&)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(float, const action_matrix&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(float, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(const action_matrix&, float)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ~(const action_matrix&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(float)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs(const action_matrix&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr(const action_matrix&)
</UL>

<P><STRONG><a name="[203]"></a>action_matrix::get_row() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, action_matrix.o(i._ZNK13action_matrix7get_rowEv))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateM(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(float, const action_matrix&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, const action_matrix&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !(const action_matrix&)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(float, const action_matrix&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(float, const action_matrix&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, const action_matrix&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(const action_matrix&, float)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ~(const action_matrix&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(float)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs(const action_matrix&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr(const action_matrix&)
</UL>

<P><STRONG><a name="[204]"></a>action_matrix::get_data(unsigned, unsigned) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, action_matrix.o(i._ZNK13action_matrix8get_dataEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = action_matrix::get_data(unsigned, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(float, const action_matrix&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(float, const action_matrix&)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tr(const action_matrix&)
</UL>

<P><STRONG><a name="[2cc]"></a>action_matrix::set_data(unsigned, unsigned, float) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, action_matrix.o(i._ZNK13action_matrix8set_dataEjjf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(float, const action_matrix&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(float, const action_matrix&)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&)
</UL>

<P><STRONG><a name="[1fe]"></a>action_matrix::operator [](unsigned) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, action_matrix.o(i._ZNK13action_matrixixEj))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::Quaternion_to_Euler(const action_matrix&)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransMatrix(const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(float)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs(const action_matrix&)
</UL>

<P><STRONG><a name="[bf]"></a>std::__rw_exception::what() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv))
<BR>[Address Reference Count : 14]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
<LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base7failureE)
<LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10badbit_setE)
<LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10eofbit_setE)
<LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base11failbit_setE)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt11logic_error)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt12domain_error)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt16invalid_argument)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt12length_error)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt12out_of_range)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt13runtime_error)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt11range_error)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt14overflow_error)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt15underflow_error)
</UL>
<P><STRONG><a name="[d6]"></a>std::collate_byname&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const</STRONG> (Thumb, 154 bytes, Stack size 552 bytes, char.o(i._ZNKSt14collate_bynameIcE10do_compareEPKcS2_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = std::collate_byname&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt14collate_bynameIcE)
</UL>
<P><STRONG><a name="[d7]"></a>std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const</STRONG> (Thumb, 116 bytes, Stack size 288 bytes, char.o(i._ZNKSt14collate_bynameIcE12do_transformEPKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, unsigned, const std::allocator&lang;char&rang;&) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, unsigned, const std::allocator&lang;char&rang;&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::begin()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strxfrm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt14collate_bynameIcE)
</UL>
<P><STRONG><a name="[2a3]"></a>std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[2a7]"></a>std::__rw_messages_base::_C_cat_close(int) const</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, messages.o(i._ZNKSt18__rw_messages_base12_C_cat_closeEi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catclose(__rw::__rw_cat*)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[2a9]"></a>std::__rw_messages_base::_C_get_locale(int) const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, messages.o(i._ZNKSt18__rw_messages_base13_C_get_localeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = std::__rw_messages_base::_C_get_locale(int) const &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[2aa]"></a>std::__rw_messages_base::_C_get_message(int, int, int) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, messages.o(i._ZNKSt18__rw_messages_base14_C_get_messageEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = std::__rw_messages_base::_C_get_message(int, int, int) const &rArr; catgets(__rw::__rw_cat*, int, int, const char*) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[ca]"></a>std::ctype&lang;char&rang;::do_tolower(char*, const char*) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, char.o(i._ZNKSt5ctypeIcE10do_tolowerEPcPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::ctype&lang;char&rang;::do_tolower(char*, const char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[cc]"></a>std::ctype&lang;char&rang;::do_tolower(char) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, char.o(i._ZNKSt5ctypeIcE10do_tolowerEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::ctype&lang;char&rang;::do_tolower(char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[c9]"></a>std::ctype&lang;char&rang;::do_toupper(char*, const char*) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, char.o(i._ZNKSt5ctypeIcE10do_toupperEPcPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::ctype&lang;char&rang;::do_toupper(char*, const char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[cb]"></a>std::ctype&lang;char&rang;::do_toupper(char) const</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, char.o(i._ZNKSt5ctypeIcE10do_toupperEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::ctype&lang;char&rang;::do_toupper(char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[2ab]"></a>std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(i._ZNKSt5ctypeIcE2isENSt10ctype_base4maskEc))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::do_toupper(char) const
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::do_toupper(char*, const char*) const
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::do_tolower(char) const
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::do_tolower(char*, const char*) const
</UL>

<P><STRONG><a name="[2ac]"></a>std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, locale.o(i._ZNKSt6locale13_C_make_facetERKNS_2idEbiPFPN4__rw15__rw_facet_baseEiPKcjE))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[2af]"></a>std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale16_C_install_facetEPN4__rw15__rw_facet_baseERKNS_2idE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const &rArr; __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[2b0]"></a>std::locale::name() const</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale4nameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::global(const std::locale&)
</UL>

<P><STRONG><a name="[150]"></a>std::type_info::operator ==(const std::type_info&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, type_info_eq.o(i._ZNKSt9type_infoeqERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[156]"></a>std::type_info::operator !=(const std::type_info&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, type_info_ne.o(i._ZNKSt9type_infoneERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::type_info::operator !=(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
</UL>

<P><STRONG><a name="[178]"></a>std::bad_typeid::bad_typeid(const std::bad_typeid&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_typeid::bad_typeid(const std::bad_typeid&)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>

<P><STRONG><a name="[3b3]"></a>std::bad_typeid::bad_typeid__sub_object(const std::bad_typeid&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1ERKS_), UNUSED)

<P><STRONG><a name="[177]"></a>std::bad_typeid::bad_typeid()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_typeid::bad_typeid()
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>

<P><STRONG><a name="[3b4]"></a>std::bad_typeid::bad_typeid__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidC1Ev), UNUSED)

<P><STRONG><a name="[c3]"></a>std::bad_typeid::~bad_typeid__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::bad_typeid::~bad_typeid__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_typeid.o(.constdata__ZTVSt10bad_typeid)
</UL>
<P><STRONG><a name="[80]"></a>std::bad_typeid::~bad_typeid()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_typeid::~bad_typeid()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> arm_exceptions_bad_typeid.o(.text)
<LI> bad_typeid.o(.constdata__ZTVSt10bad_typeid)
</UL>
<P><STRONG><a name="[3b5]"></a>std::bad_typeid::~bad_typeid__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_typeid.o(i._ZNSt10bad_typeidD1Ev), UNUSED)

<P><STRONG><a name="[26f]"></a>std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(i._ZNSt11char_traitsIcE4copyEPcPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, unsigned, const std::allocator&lang;char&rang;&)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::begin()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_parse_name(__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;&, const char*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>

<P><STRONG><a name="[27e]"></a>std::logic_error::logic_error(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11logic_errorC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = std::logic_error::logic_error(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::invalid_argument::invalid_argument(const char*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::out_of_range::out_of_range(const char*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::length_error::length_error(const char*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::domain_error::domain_error(const char*)
</UL>

<P><STRONG><a name="[3b6]"></a>std::logic_error::logic_error__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11logic_errorC1EPKc), UNUSED)

<P><STRONG><a name="[280]"></a>std::logic_error::logic_error(const std::logic_error&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11logic_errorC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = std::logic_error::logic_error(const std::logic_error&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const std::__rw_exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::invalid_argument::invalid_argument(const std::invalid_argument&)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::out_of_range::out_of_range(const std::out_of_range&)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::length_error::length_error(const std::length_error&)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::domain_error::domain_error(const std::domain_error&)
</UL>

<P><STRONG><a name="[3b7]"></a>std::logic_error::logic_error__sub_object(const std::logic_error&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11logic_errorC1ERKS_), UNUSED)

<P><STRONG><a name="[c4]"></a>std::logic_error::~logic_error__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11logic_errorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::logic_error::~logic_error__deallocating() &rArr; std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::~logic_error()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVSt11logic_error)
</UL>
<P><STRONG><a name="[92]"></a>std::logic_error::~logic_error()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11logic_errorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::invalid_argument::~invalid_argument()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::out_of_range::~out_of_range()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::length_error::~length_error()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::domain_error::~domain_error()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::~logic_error__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt11logic_error)
</UL>
<P><STRONG><a name="[3b8]"></a>std::logic_error::~logic_error__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11logic_errorD1Ev), UNUSED)

<P><STRONG><a name="[28b]"></a>std::range_error::range_error(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11range_errorC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::range_error::range_error(const char*) &rArr; std::runtime_error::runtime_error(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3b9]"></a>std::range_error::range_error__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11range_errorC1EPKc), UNUSED)

<P><STRONG><a name="[28c]"></a>std::range_error::range_error(const std::range_error&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11range_errorC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::range_error::range_error(const std::range_error&) &rArr; std::runtime_error::runtime_error(const std::runtime_error&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const std::runtime_error&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3ba]"></a>std::range_error::range_error__sub_object(const std::range_error&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11range_errorC1ERKS_), UNUSED)

<P><STRONG><a name="[c5]"></a>std::range_error::~range_error__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11range_errorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::range_error::~range_error__deallocating() &rArr; std::range_error::~range_error() &rArr; std::runtime_error::~runtime_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::range_error::~range_error()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVSt11range_error)
</UL>
<P><STRONG><a name="[98]"></a>std::range_error::~range_error()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11range_errorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::range_error::~range_error() &rArr; std::runtime_error::~runtime_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::~runtime_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::range_error::~range_error__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt11range_error)
</UL>
<P><STRONG><a name="[3bb]"></a>std::range_error::~range_error__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt11range_errorD1Ev), UNUSED)

<P><STRONG><a name="[2b3]"></a>std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, char.o(i._ZNSt12ctype_bynameIcE17_C_get_mask_tableEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>

<P><STRONG><a name="[2b4]"></a>std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[3bc]"></a>std::ctype_byname&lang;char&rang;::ctype_byname__sub_object(const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj), UNUSED)

<P><STRONG><a name="[c7]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating() &rArr; std::ctype_byname&lang;char&rang;::~ctype_byname() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[c6]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[3bd]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED1Ev), UNUSED)

<P><STRONG><a name="[281]"></a>std::domain_error::domain_error(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12domain_errorC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::domain_error::domain_error(const char*) &rArr; std::logic_error::logic_error(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3be]"></a>std::domain_error::domain_error__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12domain_errorC1EPKc), UNUSED)

<P><STRONG><a name="[282]"></a>std::domain_error::domain_error(const std::domain_error&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12domain_errorC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::domain_error::domain_error(const std::domain_error&) &rArr; std::logic_error::logic_error(const std::logic_error&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const std::logic_error&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3bf]"></a>std::domain_error::domain_error__sub_object(const std::domain_error&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12domain_errorC1ERKS_), UNUSED)

<P><STRONG><a name="[cd]"></a>std::domain_error::~domain_error__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12domain_errorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::domain_error::~domain_error__deallocating() &rArr; std::domain_error::~domain_error() &rArr; std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::domain_error::~domain_error()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVSt12domain_error)
</UL>
<P><STRONG><a name="[93]"></a>std::domain_error::~domain_error()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12domain_errorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::domain_error::~domain_error() &rArr; std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::~logic_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::domain_error::~domain_error__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt12domain_error)
</UL>
<P><STRONG><a name="[3c0]"></a>std::domain_error::~domain_error__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12domain_errorD1Ev), UNUSED)

<P><STRONG><a name="[285]"></a>std::length_error::length_error(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12length_errorC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::length_error::length_error(const char*) &rArr; std::logic_error::logic_error(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3c1]"></a>std::length_error::length_error__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12length_errorC1EPKc), UNUSED)

<P><STRONG><a name="[286]"></a>std::length_error::length_error(const std::length_error&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12length_errorC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::length_error::length_error(const std::length_error&) &rArr; std::logic_error::logic_error(const std::logic_error&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const std::logic_error&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3c2]"></a>std::length_error::length_error__sub_object(const std::length_error&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12length_errorC1ERKS_), UNUSED)

<P><STRONG><a name="[ce]"></a>std::length_error::~length_error__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12length_errorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::length_error::~length_error__deallocating() &rArr; std::length_error::~length_error() &rArr; std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::length_error::~length_error()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVSt12length_error)
</UL>
<P><STRONG><a name="[95]"></a>std::length_error::~length_error()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12length_errorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::length_error::~length_error() &rArr; std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::~logic_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::length_error::~length_error__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt12length_error)
</UL>
<P><STRONG><a name="[3c3]"></a>std::length_error::~length_error__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12length_errorD1Ev), UNUSED)

<P><STRONG><a name="[287]"></a>std::out_of_range::out_of_range(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12out_of_rangeC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::out_of_range::out_of_range(const char*) &rArr; std::logic_error::logic_error(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3c4]"></a>std::out_of_range::out_of_range__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12out_of_rangeC1EPKc), UNUSED)

<P><STRONG><a name="[288]"></a>std::out_of_range::out_of_range(const std::out_of_range&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12out_of_rangeC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::out_of_range::out_of_range(const std::out_of_range&) &rArr; std::logic_error::logic_error(const std::logic_error&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const std::logic_error&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3c5]"></a>std::out_of_range::out_of_range__sub_object(const std::out_of_range&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12out_of_rangeC1ERKS_), UNUSED)

<P><STRONG><a name="[cf]"></a>std::out_of_range::~out_of_range__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12out_of_rangeD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::out_of_range::~out_of_range__deallocating() &rArr; std::out_of_range::~out_of_range() &rArr; std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::out_of_range::~out_of_range()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVSt12out_of_range)
</UL>
<P><STRONG><a name="[96]"></a>std::out_of_range::~out_of_range()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12out_of_rangeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::out_of_range::~out_of_range() &rArr; std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::~logic_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::out_of_range::~out_of_range__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt12out_of_range)
</UL>
<P><STRONG><a name="[3c6]"></a>std::out_of_range::~out_of_range__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt12out_of_rangeD1Ev), UNUSED)

<P><STRONG><a name="[152]"></a>std::bad_exception::bad_exception(const std::bad_exception&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_exception_cctor.o(i._ZNSt13bad_exceptionC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_exception::bad_exception(const std::bad_exception&)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3c7]"></a>std::bad_exception::bad_exception__sub_object(const std::bad_exception&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_exception_cctor.o(i._ZNSt13bad_exceptionC1ERKS_), UNUSED)

<P><STRONG><a name="[151]"></a>std::bad_exception::bad_exception()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_exception_ctor.o(i._ZNSt13bad_exceptionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_exception::bad_exception()
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3c8]"></a>std::bad_exception::bad_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_exception_ctor.o(i._ZNSt13bad_exceptionC1Ev), UNUSED)

<P><STRONG><a name="[d0]"></a>std::bad_exception::~bad_exception__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_exception_dtor.o(i._ZNSt13bad_exceptionD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::bad_exception::~bad_exception__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[7b]"></a>std::bad_exception::~bad_exception()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_exception::~bad_exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> arm_exceptions_callunex.o(.text)
<LI> bad_exception_dtor.o(.constdata__ZTVSt13bad_exception)
<LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
</UL>
<P><STRONG><a name="[3c9]"></a>std::bad_exception::~bad_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_exception_dtor.o(i._ZNSt13bad_exceptionD1Ev), UNUSED)

<P><STRONG><a name="[289]"></a>std::runtime_error::runtime_error(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt13runtime_errorC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = std::runtime_error::runtime_error(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::underflow_error::underflow_error(const char*)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::overflow_error::overflow_error(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::range_error::range_error(const char*)
</UL>

<P><STRONG><a name="[3ca]"></a>std::runtime_error::runtime_error__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt13runtime_errorC1EPKc), UNUSED)

<P><STRONG><a name="[28a]"></a>std::runtime_error::runtime_error(const std::runtime_error&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt13runtime_errorC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = std::runtime_error::runtime_error(const std::runtime_error&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const std::__rw_exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::underflow_error::underflow_error(const std::underflow_error&)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::overflow_error::overflow_error(const std::overflow_error&)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::range_error::range_error(const std::range_error&)
</UL>

<P><STRONG><a name="[3cb]"></a>std::runtime_error::runtime_error__sub_object(const std::runtime_error&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt13runtime_errorC1ERKS_), UNUSED)

<P><STRONG><a name="[d1]"></a>std::runtime_error::~runtime_error__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt13runtime_errorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::runtime_error::~runtime_error__deallocating() &rArr; std::runtime_error::~runtime_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::~runtime_error()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVSt13runtime_error)
</UL>
<P><STRONG><a name="[97]"></a>std::runtime_error::~runtime_error()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt13runtime_errorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::runtime_error::~runtime_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::underflow_error::~underflow_error()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::overflow_error::~overflow_error()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::~runtime_error__deallocating()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::range_error::~range_error()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt13runtime_error)
</UL>
<P><STRONG><a name="[3cc]"></a>std::runtime_error::~runtime_error__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt13runtime_errorD1Ev), UNUSED)

<P><STRONG><a name="[2b6]"></a>std::__rw_exception::_C_vformat(const char*, std::__va_list)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, rwstdexcept.o(i._ZNSt14__rw_exception10_C_vformatEPKcSt9__va_list), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[26a]"></a>std::__rw_exception::_C_vformat(int, std::__va_list)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rwstdexcept.o(i._ZNSt14__rw_exception10_C_vformatEiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[27f]"></a>std::__rw_exception::_C_assign(const char*, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, rwstdexcept.o(i._ZNSt14__rw_exception9_C_assignEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const std::__rw_exception&)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const char*)
</UL>

<P><STRONG><a name="[2b1]"></a>std::__rw_exception::__rw_exception(const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rwthrowproc_impl.o(i._ZNSt14__rw_exceptionC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::failure(const char*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const char*)
</UL>

<P><STRONG><a name="[3cd]"></a>std::__rw_exception::__rw_exception__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rwthrowproc_impl.o(i._ZNSt14__rw_exceptionC1EPKc), UNUSED)

<P><STRONG><a name="[2b2]"></a>std::__rw_exception::__rw_exception(const std::__rw_exception&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwthrowproc_impl.o(i._ZNSt14__rw_exceptionC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::failure(const std::ios_base::failure&)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const std::runtime_error&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const std::logic_error&)
</UL>

<P><STRONG><a name="[3ce]"></a>std::__rw_exception::__rw_exception__sub_object(const std::__rw_exception&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rwthrowproc_impl.o(i._ZNSt14__rw_exceptionC1ERKS_), UNUSED)

<P><STRONG><a name="[2b8]"></a>std::__rw_exception::__rw_exception(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1ERKSs), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>

<P><STRONG><a name="[3cf]"></a>std::__rw_exception::__rw_exception__sub_object(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1ERKSs), UNUSED)

<P><STRONG><a name="[269]"></a>std::__rw_exception::__rw_exception()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__rw_exception::__rw_exception()
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[3d0]"></a>std::__rw_exception::__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev), UNUSED)

<P><STRONG><a name="[d3]"></a>std::__rw_exception::~__rw_exception__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::__rw_exception::~__rw_exception__deallocating() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[d2]"></a>std::__rw_exception::~__rw_exception()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception__deallocating()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::~failure()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::~runtime_error()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::~logic_error()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[3d1]"></a>std::__rw_exception::~__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev), UNUSED)

<P><STRONG><a name="[d5]"></a>std::collate_byname&lang;char&rang;::~collate_byname__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt14collate_bynameIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::collate_byname&lang;char&rang;::~collate_byname__deallocating() &rArr; std::collate_byname&lang;char&rang;::~collate_byname() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::~collate_byname()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt14collate_bynameIcE)
</UL>
<P><STRONG><a name="[d4]"></a>std::collate_byname&lang;char&rang;::~collate_byname()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, char.o(i._ZNSt14collate_bynameIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::collate_byname&lang;char&rang;::~collate_byname() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate&lang;char&rang;::~collate()
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::~collate_byname__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt14collate_bynameIcE)
</UL>
<P><STRONG><a name="[3d2]"></a>std::collate_byname&lang;char&rang;::~collate_byname__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt14collate_bynameIcED1Ev), UNUSED)

<P><STRONG><a name="[28d]"></a>std::overflow_error::overflow_error(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt14overflow_errorC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::overflow_error::overflow_error(const char*) &rArr; std::runtime_error::runtime_error(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3d3]"></a>std::overflow_error::overflow_error__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt14overflow_errorC1EPKc), UNUSED)

<P><STRONG><a name="[28e]"></a>std::overflow_error::overflow_error(const std::overflow_error&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt14overflow_errorC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::overflow_error::overflow_error(const std::overflow_error&) &rArr; std::runtime_error::runtime_error(const std::runtime_error&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const std::runtime_error&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3d4]"></a>std::overflow_error::overflow_error__sub_object(const std::overflow_error&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt14overflow_errorC1ERKS_), UNUSED)

<P><STRONG><a name="[d9]"></a>std::overflow_error::~overflow_error__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt14overflow_errorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::overflow_error::~overflow_error__deallocating() &rArr; std::overflow_error::~overflow_error() &rArr; std::runtime_error::~runtime_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::overflow_error::~overflow_error()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVSt14overflow_error)
</UL>
<P><STRONG><a name="[99]"></a>std::overflow_error::~overflow_error()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt14overflow_errorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::overflow_error::~overflow_error() &rArr; std::runtime_error::~runtime_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::~runtime_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::overflow_error::~overflow_error__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt14overflow_error)
</UL>
<P><STRONG><a name="[3d5]"></a>std::overflow_error::~overflow_error__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt14overflow_errorD1Ev), UNUSED)

<P><STRONG><a name="[28f]"></a>std::underflow_error::underflow_error(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt15underflow_errorC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::underflow_error::underflow_error(const char*) &rArr; std::runtime_error::runtime_error(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3d6]"></a>std::underflow_error::underflow_error__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt15underflow_errorC1EPKc), UNUSED)

<P><STRONG><a name="[290]"></a>std::underflow_error::underflow_error(const std::underflow_error&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt15underflow_errorC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::underflow_error::underflow_error(const std::underflow_error&) &rArr; std::runtime_error::runtime_error(const std::runtime_error&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::runtime_error(const std::runtime_error&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3d7]"></a>std::underflow_error::underflow_error__sub_object(const std::underflow_error&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt15underflow_errorC1ERKS_), UNUSED)

<P><STRONG><a name="[da]"></a>std::underflow_error::~underflow_error__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt15underflow_errorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::underflow_error::~underflow_error__deallocating() &rArr; std::underflow_error::~underflow_error() &rArr; std::runtime_error::~runtime_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::underflow_error::~underflow_error()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVSt15underflow_error)
</UL>
<P><STRONG><a name="[9a]"></a>std::underflow_error::~underflow_error()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt15underflow_errorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::underflow_error::~underflow_error() &rArr; std::runtime_error::~runtime_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::~runtime_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::underflow_error::~underflow_error__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt15underflow_error)
</UL>
<P><STRONG><a name="[3d8]"></a>std::underflow_error::~underflow_error__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt15underflow_errorD1Ev), UNUSED)

<P><STRONG><a name="[283]"></a>std::invalid_argument::invalid_argument(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt16invalid_argumentC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::invalid_argument::invalid_argument(const char*) &rArr; std::logic_error::logic_error(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3d9]"></a>std::invalid_argument::invalid_argument__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt16invalid_argumentC1EPKc), UNUSED)

<P><STRONG><a name="[284]"></a>std::invalid_argument::invalid_argument(const std::invalid_argument&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt16invalid_argumentC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::invalid_argument::invalid_argument(const std::invalid_argument&) &rArr; std::logic_error::logic_error(const std::logic_error&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::logic_error(const std::logic_error&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3da]"></a>std::invalid_argument::invalid_argument__sub_object(const std::invalid_argument&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt16invalid_argumentC1ERKS_), UNUSED)

<P><STRONG><a name="[db]"></a>std::invalid_argument::~invalid_argument__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt16invalid_argumentD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::invalid_argument::~invalid_argument__deallocating() &rArr; std::invalid_argument::~invalid_argument() &rArr; std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::invalid_argument::~invalid_argument()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVSt16invalid_argument)
</UL>
<P><STRONG><a name="[94]"></a>std::invalid_argument::~invalid_argument()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt16invalid_argumentD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::invalid_argument::~invalid_argument() &rArr; std::logic_error::~logic_error() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::~logic_error()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::invalid_argument::~invalid_argument__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVSt16invalid_argument)
</UL>
<P><STRONG><a name="[3db]"></a>std::invalid_argument::~invalid_argument__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt16invalid_argumentD1Ev), UNUSED)

<P><STRONG><a name="[2ba]"></a>std::__rw_messages_base::~__rw_messages_base()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt18__rw_messages_baseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>

<P><STRONG><a name="[3dc]"></a>std::__rw_messages_base::~__rw_messages_base__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt18__rw_messages_baseD1Ev), UNUSED)

<P><STRONG><a name="[ac]"></a>std::__rw_open_cat_data::__rw_open_cat_data()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
</UL>
<P><STRONG><a name="[3dd]"></a>std::__rw_open_cat_data::__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev), UNUSED)

<P><STRONG><a name="[ab]"></a>std::__rw_open_cat_data::~__rw_open_cat_data()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = std::__rw_open_cat_data::~__rw_open_cat_data() &rArr; std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
<LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
</UL>
<P><STRONG><a name="[3de]"></a>std::__rw_open_cat_data::~__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev), UNUSED)

<P><STRONG><a name="[2bc]"></a>std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&) &rArr; std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>

<P><STRONG><a name="[22e]"></a>std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~map()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, icm20602.o(i._ZNSt3mapIhhSt4lessIhESaISt4pairIKhhEEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~map() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[3df]"></a>std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~map__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, icm20602.o(i._ZNSt3mapIhhSt4lessIhESaISt4pairIKhhEEED1Ev), UNUSED)

<P><STRONG><a name="[c8]"></a>std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = std::ctype&lang;char&rang;::_C_initfacet(const std::locale&) &rArr; std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[2b5]"></a>std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[3e0]"></a>std::ctype&lang;char&rang;::ctype__sub_object(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj), UNUSED)

<P><STRONG><a name="[dd]"></a>std::ctype&lang;char&rang;::~ctype__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::ctype&lang;char&rang;::~ctype__deallocating() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[dc]"></a>std::ctype&lang;char&rang;::~ctype()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[3e1]"></a>std::ctype&lang;char&rang;::~ctype__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev), UNUSED)

<P><STRONG><a name="[2be]"></a>std::locale::_C_remove_facets(int)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, locale.o(i._ZNSt6locale16_C_remove_facetsEi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_map_category(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const std::locale&, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const char*, int)
</UL>

<P><STRONG><a name="[bc]"></a>std::locale::facet::~facet__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt6locale5facetD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::locale::facet::~facet__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[2c0]"></a>std::locale::global(const std::locale&)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, locale.o(i._ZNSt6locale6globalERKS_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
</UL>

<P><STRONG><a name="[2c1]"></a>std::locale::_C_init()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, locale.o(i._ZNSt6locale7_C_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[2a8]"></a>std::locale::classic()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, locale.o(i._ZNSt6locale7classicEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_close(int) const
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[2c2]"></a>std::locale::locale(const char*)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, locale.o(i._ZNSt6localeC1EPKc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_parse_name(__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;&, const char*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[3e2]"></a>std::locale::locale__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, locale.o(i._ZNSt6localeC1EPKc), UNUSED)

<P><STRONG><a name="[2ae]"></a>std::locale::locale(__rw::__rw_locale_imp*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::global(const std::locale&)
</UL>

<P><STRONG><a name="[3e3]"></a>std::locale::locale__sub_object(__rw::__rw_locale_imp*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE), UNUSED)

<P><STRONG><a name="[2bb]"></a>std::locale::locale(const std::locale&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[3e4]"></a>std::locale::locale__sub_object(const std::locale&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_), UNUSED)

<P><STRONG><a name="[2c3]"></a>std::locale::locale(const std::locale&, const char*, int)</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, locale.o(i._ZNSt6localeC1ERKS_PKci), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_map_category(int)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_parse_name(__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;&, const char*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_remove_facets(int)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const __rw::__rw_locale_imp&, const char*, unsigned)
</UL>

<P><STRONG><a name="[3e5]"></a>std::locale::locale__sub_object(const std::locale&, const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, locale.o(i._ZNSt6localeC1ERKS_PKci), UNUSED)

<P><STRONG><a name="[2c4]"></a>std::locale::locale(const std::locale&, const std::locale&, int)</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, locale.o(i._ZNSt6localeC1ERKS_S1_i), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_map_category(int)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_remove_facets(int)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const __rw::__rw_locale_imp&, const char*, unsigned)
</UL>

<P><STRONG><a name="[3e6]"></a>std::locale::locale__sub_object(const std::locale&, const std::locale&, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, locale.o(i._ZNSt6localeC1ERKS_S1_i), UNUSED)

<P><STRONG><a name="[243]"></a>std::locale::locale()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[3e7]"></a>std::locale::locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev), UNUSED)

<P><STRONG><a name="[a2]"></a>std::locale::~locale()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZNSt6locale7classicEv)
</UL>
<P><STRONG><a name="[3e8]"></a>std::locale::~locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev), UNUSED)

<P><STRONG><a name="[2a6]"></a>std::locale::operator =(const std::locale&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, locale.o(i._ZNSt6localeaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_close(int) const
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
</UL>

<P><STRONG><a name="[2c5]"></a>std::collate&lang;char&rang;::~collate__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt7collateIcED0Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate&lang;char&rang;::~collate()
</UL>

<P><STRONG><a name="[2b9]"></a>std::collate&lang;char&rang;::~collate()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, char.o(i._ZNSt7collateIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::collate&lang;char&rang;::~collate()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate&lang;char&rang;::~collate__deallocating()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::~collate_byname()
</UL>

<P><STRONG><a name="[3e9]"></a>std::collate&lang;char&rang;::~collate__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt7collateIcED1Ev), UNUSED)

<P><STRONG><a name="[27d]"></a>std::bad_cast::bad_cast(const std::bad_cast&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_cast.o(i._ZNSt8bad_castC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_cast::bad_cast(const std::bad_cast&)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3ea]"></a>std::bad_cast::bad_cast__sub_object(const std::bad_cast&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_cast.o(i._ZNSt8bad_castC1ERKS_), UNUSED)

<P><STRONG><a name="[27c]"></a>std::bad_cast::bad_cast()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_cast.o(i._ZNSt8bad_castC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_cast::bad_cast()
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3eb]"></a>std::bad_cast::bad_cast__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_cast.o(i._ZNSt8bad_castC1Ev), UNUSED)

<P><STRONG><a name="[de]"></a>std::bad_cast::~bad_cast__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_cast.o(i._ZNSt8bad_castD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::bad_cast::~bad_cast__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_cast::~bad_cast()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_cast.o(.constdata__ZTVSt8bad_cast)
</UL>
<P><STRONG><a name="[91]"></a>std::bad_cast::~bad_cast()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_cast.o(i._ZNSt8bad_castD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_cast::~bad_cast()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_cast::~bad_cast__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> bad_cast.o(.constdata__ZTVSt8bad_cast)
</UL>
<P><STRONG><a name="[3ec]"></a>std::bad_cast::~bad_cast__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_cast.o(i._ZNSt8bad_castD1Ev), UNUSED)

<P><STRONG><a name="[293]"></a>std::ios_base::badbit_set::badbit_set(const std::ios_base::badbit_set&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10badbit_setC1ERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::ios_base::badbit_set::badbit_set(const std::ios_base::badbit_set&) &rArr; std::ios_base::failure::failure(const std::ios_base::failure&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::failure(const std::ios_base::failure&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3ed]"></a>std::ios_base::badbit_set::badbit_set__sub_object(const std::ios_base::badbit_set&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10badbit_setC1ERKS0_), UNUSED)

<P><STRONG><a name="[be]"></a>std::ios_base::badbit_set::~badbit_set__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10badbit_setD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::ios_base::badbit_set::~badbit_set__deallocating() &rArr; std::ios_base::badbit_set::~badbit_set() &rArr; std::ios_base::failure::~failure() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::badbit_set::~badbit_set()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10badbit_setE)
</UL>
<P><STRONG><a name="[9c]"></a>std::ios_base::badbit_set::~badbit_set()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10badbit_setD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::ios_base::badbit_set::~badbit_set() &rArr; std::ios_base::failure::~failure() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::~failure()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::badbit_set::~badbit_set__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10badbit_setE)
</UL>
<P><STRONG><a name="[3ee]"></a>std::ios_base::badbit_set::~badbit_set__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10badbit_setD1Ev), UNUSED)

<P><STRONG><a name="[294]"></a>std::ios_base::eofbit_set::eofbit_set(const std::ios_base::eofbit_set&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10eofbit_setC1ERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::ios_base::eofbit_set::eofbit_set(const std::ios_base::eofbit_set&) &rArr; std::ios_base::failure::failure(const std::ios_base::failure&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::failure(const std::ios_base::failure&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3ef]"></a>std::ios_base::eofbit_set::eofbit_set__sub_object(const std::ios_base::eofbit_set&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10eofbit_setC1ERKS0_), UNUSED)

<P><STRONG><a name="[c0]"></a>std::ios_base::eofbit_set::~eofbit_set__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10eofbit_setD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::ios_base::eofbit_set::~eofbit_set__deallocating() &rArr; std::ios_base::eofbit_set::~eofbit_set() &rArr; std::ios_base::failure::~failure() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::eofbit_set::~eofbit_set()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10eofbit_setE)
</UL>
<P><STRONG><a name="[9d]"></a>std::ios_base::eofbit_set::~eofbit_set()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10eofbit_setD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::ios_base::eofbit_set::~eofbit_set() &rArr; std::ios_base::failure::~failure() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::~failure()
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::eofbit_set::~eofbit_set__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base10eofbit_setE)
</UL>
<P><STRONG><a name="[3f0]"></a>std::ios_base::eofbit_set::~eofbit_set__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base10eofbit_setD1Ev), UNUSED)

<P><STRONG><a name="[292]"></a>std::ios_base::failbit_set::failbit_set(const std::ios_base::failbit_set&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base11failbit_setC1ERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = std::ios_base::failbit_set::failbit_set(const std::ios_base::failbit_set&) &rArr; std::ios_base::failure::failure(const std::ios_base::failure&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::failure(const std::ios_base::failure&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3f1]"></a>std::ios_base::failbit_set::failbit_set__sub_object(const std::ios_base::failbit_set&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base11failbit_setC1ERKS0_), UNUSED)

<P><STRONG><a name="[c1]"></a>std::ios_base::failbit_set::~failbit_set__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base11failbit_setD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::ios_base::failbit_set::~failbit_set__deallocating() &rArr; std::ios_base::failbit_set::~failbit_set() &rArr; std::ios_base::failure::~failure() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failbit_set::~failbit_set()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base11failbit_setE)
</UL>
<P><STRONG><a name="[9b]"></a>std::ios_base::failbit_set::~failbit_set()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base11failbit_setD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::ios_base::failbit_set::~failbit_set() &rArr; std::ios_base::failure::~failure() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::~failure()
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failbit_set::~failbit_set__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base11failbit_setE)
</UL>
<P><STRONG><a name="[3f2]"></a>std::ios_base::failbit_set::~failbit_set__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base11failbit_setD1Ev), UNUSED)

<P><STRONG><a name="[291]"></a>std::ios_base::failure::failure(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base7failureC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = std::ios_base::failure::failure(const char*) &rArr; std::__rw_exception::__rw_exception(const char*) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3f3]"></a>std::ios_base::failure::failure__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base7failureC1EPKc), UNUSED)

<P><STRONG><a name="[295]"></a>std::ios_base::failure::failure(const std::ios_base::failure&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base7failureC1ERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = std::ios_base::failure::failure(const std::ios_base::failure&) &rArr; std::__rw_exception::__rw_exception(const std::__rw_exception&) &rArr; std::__rw_exception::_C_assign(const char*, unsigned) &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const std::__rw_exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failbit_set::failbit_set(const std::ios_base::failbit_set&)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::eofbit_set::eofbit_set(const std::ios_base::eofbit_set&)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::badbit_set::badbit_set(const std::ios_base::badbit_set&)
</UL>

<P><STRONG><a name="[3f4]"></a>std::ios_base::failure::failure__sub_object(const std::ios_base::failure&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base7failureC1ERKS0_), UNUSED)

<P><STRONG><a name="[c2]"></a>std::ios_base::failure::~failure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base7failureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::ios_base::failure::~failure__deallocating() &rArr; std::ios_base::failure::~failure() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::~failure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base7failureE)
</UL>
<P><STRONG><a name="[9e]"></a>std::ios_base::failure::~failure()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base7failureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::ios_base::failure::~failure() &rArr; std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::~failure__deallocating()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failbit_set::~failbit_set()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::eofbit_set::~eofbit_set()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::badbit_set::~badbit_set()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> rwthrowproc_impl.o(.constdata__ZTVNSt8ios_base7failureE)
</UL>
<P><STRONG><a name="[3f5]"></a>std::ios_base::failure::~failure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwthrowproc_impl.o(i._ZNSt8ios_base7failureD1Ev), UNUSED)

<P><STRONG><a name="[e0]"></a>std::messages&lang;char&rang;::~messages__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::messages&lang;char&rang;::~messages__deallocating() &rArr; std::messages&lang;char&rang;::~messages() &rArr; std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[df]"></a>std::messages&lang;char&rang;::~messages()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::messages&lang;char&rang;::~messages() &rArr; std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::~__rw_messages_base()
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[3f6]"></a>std::messages&lang;char&rang;::~messages__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev), UNUSED)

<P><STRONG><a name="[2c6]"></a>std::numpunct&lang;char&rang;::~numpunct__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt8numpunctIcED0Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::numpunct&lang;char&rang;::~numpunct()
</UL>

<P><STRONG><a name="[2c7]"></a>std::numpunct&lang;char&rang;::~numpunct()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, char.o(i._ZNSt8numpunctIcED1Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl&lang;char&rang;::~__rw_numpunct_impl()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::numpunct&lang;char&rang;::~numpunct__deallocating()
</UL>

<P><STRONG><a name="[3f7]"></a>std::numpunct&lang;char&rang;::~numpunct__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt8numpunctIcED1Ev), UNUSED)

<P><STRONG><a name="[200]"></a>std::bad_alloc::bad_alloc(const std::bad_alloc&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_alloc_cctor.o(i._ZNSt9bad_allocC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_alloc::bad_alloc(const std::bad_alloc&)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception(const std::exception&)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3f8]"></a>std::bad_alloc::bad_alloc__sub_object(const std::bad_alloc&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_alloc_cctor.o(i._ZNSt9bad_allocC1ERKS_), UNUSED)

<P><STRONG><a name="[1ff]"></a>std::bad_alloc::bad_alloc()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bad_alloc_ctor.o(i._ZNSt9bad_allocC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_alloc::bad_alloc()
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>

<P><STRONG><a name="[3f9]"></a>std::bad_alloc::bad_alloc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_alloc_ctor.o(i._ZNSt9bad_allocC1Ev), UNUSED)

<P><STRONG><a name="[e3]"></a>std::bad_alloc::~bad_alloc__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bad_alloc_dtor.o(i._ZNSt9bad_allocD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::bad_alloc::~bad_alloc__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[8c]"></a>std::bad_alloc::~bad_alloc()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::bad_alloc::~bad_alloc()
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> bad_alloc_dtor.o(.constdata__ZTVSt9bad_alloc)
<LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
<LI> newhandler.o(i._Z21__default_new_handlerv)
</UL>
<P><STRONG><a name="[3fa]"></a>std::bad_alloc::~bad_alloc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, bad_alloc_dtor.o(i._ZNSt9bad_allocD1Ev), UNUSED)

<P><STRONG><a name="[27b]"></a>std::exception::exception(const std::exception&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_cctor.o(i._ZNSt9exceptionC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception(const std::bad_exception&)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid(const std::bad_typeid&)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc(const std::bad_alloc&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_cast::bad_cast(const std::bad_cast&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const std::__rw_exception&)
</UL>

<P><STRONG><a name="[3fb]"></a>std::exception::exception__sub_object(const std::exception&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_cctor.o(i._ZNSt9exceptionC1ERKS_), UNUSED)

<P><STRONG><a name="[27a]"></a>std::exception::exception()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::bad_exception()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::bad_typeid()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_cast::bad_cast()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception(const char*)
</UL>

<P><STRONG><a name="[3fc]"></a>std::exception::exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev), UNUSED)

<P><STRONG><a name="[b]"></a>std::exception::~exception()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, exception_dtor.o(i._ZNSt9exceptionD1Ev))
<BR>[Address Reference Count : 2]<UL><LI> exception_dtor.o(.constdata__ZTVSt9exception)
<LI> rwthrowproc_impl.o(i._ZN4__rw20__rw_throw_exceptionEiPc)
</UL>
<P><STRONG><a name="[3fd]"></a>std::exception::~exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_dtor.o(i._ZNSt9exceptionD1Ev), UNUSED)

<P><STRONG><a name="[2a4]"></a>std::__rw_get_cats()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, messages.o(i._ZSt13__rw_get_catsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::__rw_get_cats() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_close(int) const
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[24b]"></a>std::asin(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, calculateattitude.o(i._ZSt4asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::asin(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::Quaternion_to_Euler(const action_matrix&)
</UL>

<P><STRONG><a name="[206]"></a>std::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs(threeAxis)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::Quaternion_to_Euler(const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[24c]"></a>std::atan2(float, float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, calculateattitude.o(i._ZSt5atan2ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::atan2(float, float) &rArr; __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::Quaternion_to_Euler(const action_matrix&)
</UL>

<P><STRONG><a name="[264]"></a>operator ~(const action_matrix&)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, action_matrix.o(i._ZcoRK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = operator ~(const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
</UL>

<P><STRONG><a name="[a5]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdData(threeAxis*, unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(threeAxis*, unsigned)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(const char*, std::__va_list)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception(int, char*)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[2cb]"></a>operator *(const action_matrix&)</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, action_matrix.o(i._ZdeRK13action_matrix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::set_data(unsigned, unsigned, float) const
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_data(unsigned, unsigned) const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&)
</UL>

<P><STRONG><a name="[20d]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceBase::~deviceBase__deallocating()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::~aukf9axis__deallocating()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::~AUKF__deallocating()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device&lang;threeAxis, unsigned char&rang;::~device__deallocating()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::~ICM20602_Gyro__deallocating()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::facet::~facet__deallocating()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception__deallocating()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::numpunct&lang;char&rang;::~numpunct__deallocating()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate&lang;char&rang;::~collate__deallocating()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::~collate_byname__deallocating()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_typeid::~bad_typeid__deallocating()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catclose(__rw::__rw_cat*)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const char*)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_cast::~bad_cast__deallocating()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failure::~failure__deallocating()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::failbit_set::~failbit_set__deallocating()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::eofbit_set::~eofbit_set__deallocating()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ios_base::badbit_set::~badbit_set__deallocating()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::invalid_argument::~invalid_argument__deallocating()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::underflow_error::~underflow_error__deallocating()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::overflow_error::~overflow_error__deallocating()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::runtime_error::~runtime_error__deallocating()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::out_of_range::~out_of_range__deallocating()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::length_error::~length_error__deallocating()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::domain_error::~domain_error__deallocating()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::range_error::~range_error__deallocating()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::logic_error::~logic_error__deallocating()
</UL>

<P><STRONG><a name="[3fe]"></a>operator delete (void*, void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(i._ZdlPvS_), UNUSED)

<P><STRONG><a name="[222]"></a>operator /(threeAxis, float)</STRONG> (Thumb, 58 bytes, Stack size 28 bytes, device.o(i._Zdv9threeAxisf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator /(threeAxis, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[24d]"></a>operator /(const action_matrix&, float)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, action_matrix.o(i._ZdvRK13action_matrixf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = operator /(const action_matrix&, float) &rArr; action_matrix::action_matrix(unsigned, unsigned, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_scale_f32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFpre(const action_matrix&, const action_matrix&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
</UL>

<P><STRONG><a name="[30b]"></a>operator -(threeAxis, threeAxis)</STRONG> (Thumb, 70 bytes, Stack size 36 bytes, device.o(i._Zmi9threeAxisS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = operator -(threeAxis, threeAxis)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[254]"></a>operator -(const action_matrix&, const action_matrix&)</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, action_matrix.o(i._ZmiRK13action_matrixS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = operator -(const action_matrix&, const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[2cf]"></a>operator -(const action_matrix&, float)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, action_matrix.o(i._ZmiRK13action_matrixf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const action_matrix&, float)
</UL>

<P><STRONG><a name="[2d1]"></a>operator -(float, const action_matrix&)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, action_matrix.o(i._ZmifRK13action_matrix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::set_data(unsigned, unsigned, float) const
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_data(unsigned, unsigned) const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[30f]"></a>operator *(threeAxis, float)</STRONG> (Thumb, 58 bytes, Stack size 28 bytes, device.o(i._Zml9threeAxisf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = operator *(threeAxis, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
</UL>

<P><STRONG><a name="[214]"></a>operator *(const action_matrix&, const action_matrix&)</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, action_matrix.o(i._ZmlRK13action_matrixS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = operator *(const action_matrix&, const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFmeasure(const action_matrix&)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
</UL>

<P><STRONG><a name="[215]"></a>operator *(const action_matrix&, float)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, action_matrix.o(i._ZmlRK13action_matrixf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = operator *(const action_matrix&, float) &rArr; action_matrix::action_matrix(unsigned, unsigned, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_scale_f32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFpre(const action_matrix&, const action_matrix&)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
</UL>

<P><STRONG><a name="[218]"></a>operator *(float, const action_matrix&)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, action_matrix.o(i._ZmlfRK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = operator *(float, const action_matrix&) &rArr; action_matrix::action_matrix(unsigned, unsigned, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_scale_f32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
</UL>

<P><STRONG><a name="[20f]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdData(threeAxis*, unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(threeAxis*, unsigned)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(float)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_assign(const char*, unsigned)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(const char*, std::__va_list)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_base::_C_get_named_init_(const char*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const __rw::__rw_locale_imp&, const char*, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[244]"></a>operator !(const action_matrix&)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, action_matrix.o(i._ZntRK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = operator !(const action_matrix&) &rArr; action_matrix::action_matrix(unsigned, unsigned, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::UKFmeasure(const action_matrix&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
</UL>

<P><STRONG><a name="[20c]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(float)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const std::locale&, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const char*, int)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const char*)
</UL>

<P><STRONG><a name="[30c]"></a>operator +(threeAxis, threeAxis)</STRONG> (Thumb, 70 bytes, Stack size 36 bytes, device.o(i._Zpl9threeAxisS_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[217]"></a>operator +(const action_matrix&, const action_matrix&)</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, action_matrix.o(i._ZplRK13action_matrixS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = operator +(const action_matrix&, const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::estimateX(const action_matrix&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::adaptiveR(const action_matrix&)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[2d0]"></a>operator +(const action_matrix&, float)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, action_matrix.o(i._ZplRK13action_matrixf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::set_data(unsigned, unsigned, float) const
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_data(unsigned, unsigned) const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(const action_matrix&, float)
</UL>

<P><STRONG><a name="[2d6]"></a>operator +(float, const action_matrix&)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, action_matrix.o(i._ZplfRK13action_matrix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::set_data(unsigned, unsigned, float) const
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_data(unsigned, unsigned) const
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_row() const
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::get_column() const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[2d7]"></a>__ARM_array_new_general</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[155]"></a>__ARM_common_get_typeid</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, arm_exceptions_throw.o(i.__ARM_common_get_typeid))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __ARM_common_get_typeid &rArr; __cxa_bad_typeid &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_bad_typeid
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
</UL>

<P><STRONG><a name="[2d9]"></a>__ARM_common_noexcept_landing</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(i.__ARM_common_noexcept_landing), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
</UL>

<P><STRONG><a name="[169]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>

<P><STRONG><a name="[2e5]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[2d8]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ARM_vec_cleanup.o(i.__ARM_vec_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __ARM_vec_cleanup &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[2da]"></a>__ARM_vec_cleanup_rethrow</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ARM_vec_cleanup_rethrow.o(i.__ARM_vec_cleanup_rethrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>

<P><STRONG><a name="[267]"></a>__aeabi_vec_delete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, aeabi_vec_delete.o(i.__aeabi_vec_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::~aukf9axis()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::~AUKF()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[2dc]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, aeabi_vec_dtor.o(i.__aeabi_vec_dtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>

<P><STRONG><a name="[2db]"></a>__aeabi_vec_dtor_cookie</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_vec_dtor_cookie.o(i.__aeabi_vec_dtor_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>

<P><STRONG><a name="[266]"></a>__aeabi_vec_new_cookie</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aeabi_vec_new_cookie.o(i.__aeabi_vec_new_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::aukf9axis()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::AUKF(float, float, float, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, action_matrix(*)(const action_matrix&, const action_matrix&), action_matrix(*)(const action_matrix&), unsigned)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const char*, int)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const __rw::__rw_locale_imp&, const char*, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[213]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePos
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[ae]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> device.o(.constdata__ZTV10deviceBase)
<LI> icm20602.o(.constdata__ZTV6deviceI9threeAxishE)
</UL>
<P><STRONG><a name="[2dd]"></a>__cxa_vec_new</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>

<P><STRONG><a name="[157]"></a>__derived_to_base_conversion</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, rtti.o(i.__derived_to_base_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = __derived_to_base_conversion &rArr; [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_type_match
</UL>

<P><STRONG><a name="[2de]"></a>__dynamic_cast</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, rtti.o(i.__dynamic_cast), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>

<P><STRONG><a name="[2df]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[2c8]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::asin(float)
</UL>

<P><STRONG><a name="[2c9]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
</UL>

<P><STRONG><a name="[2ea]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[1fb]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderMagFix(threeAxis&)
</UL>

<P><STRONG><a name="[2f2]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[2f6]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[1fc]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderMagFix(threeAxis&)
</UL>

<P><STRONG><a name="[2f7]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[208]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs(const action_matrix&)
</UL>

<P><STRONG><a name="[2ed]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2ef]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[301]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[2ee]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2ec]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2eb]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2f5]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[2f4]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[2e7]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[2e9]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[2e8]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[2e6]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1b4]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2f1]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1ba]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[139]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[235]"></a>calculatePos</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, pos.o(i.calculatePos))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = calculatePos
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_cos_f32
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEncoder
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEulerAngle()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
</UL>

<P><STRONG><a name="[236]"></a>dataSend</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, user.o(i.dataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = dataSend &rArr; _out_stream::operator &lang;&lang;(float) const &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPos
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(float) const
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(char) const
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(const char*) const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEulerAngle()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUsartOut()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADXRS453()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USART_SendByteData&lang;unsigned long long&rang;(T1*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USART_SendByteData&lang;float&rang;(T1*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void USART_SendByteData&lang;threeAxis&rang;(T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
</UL>

<P><STRONG><a name="[2fb]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[2e0]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[223]"></a>getCmdState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user.o(i.getCmdState))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[304]"></a>getEncoder</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pos.o(i.getEncoder))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePos
</UL>

<P><STRONG><a name="[306]"></a>getPos</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pos.o(i.getPos))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
</UL>

<P><STRONG><a name="[21e]"></a>getTimeFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i.getTimeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[30a]"></a>initAHRS</STRONG> (Thumb, 1988 bytes, Stack size 768 bytes, calculateattitude.o(i.initAHRS), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(threeAxis, threeAxis)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(threeAxis, threeAxis)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(threeAxis, float)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderMagFix(threeAxis&)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADXRS453()
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeFlag
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdState
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEncoder
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::asin(float)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs(threeAxis)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransMatrix(const action_matrix&)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getI3G4250D()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(float*, unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(threeAxis*, unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;float*&rang;(T1, unsigned)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;threeAxis*&rang;(T1, unsigned)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeAxis::operator =(float)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeAxis::operator =(const threeAxis&)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLSM303AGR_Mag()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLSM303AGR_Acc()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[127]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = main &rArr; [local to main_cpp]::running() &rArr;  [local to main_cpp]::running() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceBase::devicesAllInit()
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_INIT
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Config
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[23d]"></a>resetAttitude</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, calculateattitude.o(i.resetAttitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = resetAttitude &rArr; action_matrix::operator =(const action_matrix&) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to user_cpp]::usartACCT(unsigned char, unsigned short&)
</UL>

<P><STRONG><a name="[23c]"></a>resetPos</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pos.o(i.resetPos))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to user_cpp]::usartACCT(unsigned char, unsigned short&)
</UL>

<P><STRONG><a name="[2e4]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[234]"></a>updateAHRS</STRONG> (Thumb, 892 bytes, Stack size 200 bytes, calculateattitude.o(i.updateAHRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376 + Unknown Stack Size
<LI>Call Chain = updateAHRS &rArr; aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&) &rArr; AUKF::predictX(const action_matrix&) &rArr; AUKF::unscentedTrans(const action_matrix&, const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&) &rArr; std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(threeAxis, float)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator -(threeAxis, threeAxis)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(threeAxis, float)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoderMagFix(threeAxis&)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(float) const
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(char) const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUsartOut()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADXRS453()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::fuse(const action_matrix&, const action_matrix&, const action_matrix&)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs(threeAxis)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::Quaternion_to_Euler(const action_matrix&)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getI3G4250D()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeAxis::operator =(const threeAxis&)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLSM303AGR_Mag()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLSM303AGR_Acc()
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
</UL>

<P><STRONG><a name="[1f3]"></a>usartCmdInput</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, user.o(i.usartCmdInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usartCmdInput &rArr; [local to user_cpp]::usartACCT(unsigned char, unsigned short&) &rArr; resetAttitude &rArr; action_matrix::operator =(const action_matrix&) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to user_cpp]::usartACCT(unsigned char, unsigned short&)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>wait</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(i.wait))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_OnlyRead
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[88]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>_get_lc_collate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_collate_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_collate
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_collate_2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[11c]"></a>_get_lc_monetary</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_monetary_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_monetary
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_monetary_2
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[220]"></a>void shiftRightData&lang;threeAxis*&rang;(T1, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, icm20602.o(t._Z14shiftRightDataIP9threeAxisEvT_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void shiftRightData&lang;threeAxis*&rang;(T1, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeAxis::operator =(const threeAxis&)
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::UpdateData()
</UL>

<P><STRONG><a name="[221]"></a>void shiftRightData&lang;float*&rang;(T1, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, icm20602.o(t._Z14shiftRightDataIPfEvT_j))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to calculateAttitude_cpp]::magAccFixZeroRate()
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceADXRS453::UpdateData()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::UpdateData()
</UL>

<P><STRONG><a name="[307]"></a>void USART_SendByteData&lang;threeAxis&rang;(T1*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user.o(t._Z18USART_SendByteDataI9threeAxisEvPT_))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
</UL>

<P><STRONG><a name="[309]"></a>void USART_SendByteData&lang;float&rang;(T1*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user.o(t._Z18USART_SendByteDataIfEvPT_))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
</UL>

<P><STRONG><a name="[308]"></a>void USART_SendByteData&lang;unsigned long long&rang;(T1*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, user.o(t._Z18USART_SendByteDataIyEvPT_))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
</UL>

<P><STRONG><a name="[345]"></a>__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(t._ZN4__rw12__string_refIcSt11char_traitsIcESaIcEE10_C_inc_refEv))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[314]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rw14__rw_tree_iterISt4pairIKhhEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_hNS_11__select1stIS3_hEEEEEC1ERKSB_))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, bool&rang;::pair(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&, const bool&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::operator [](const unsigned char&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++(int)
</UL>

<P><STRONG><a name="[3ff]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::__rw_tree_iter__sub_object(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rw14__rw_tree_iterISt4pairIKhhEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_hNS_11__select1stIS3_hEEEEEC1ERKSB_), UNUSED)

<P><STRONG><a name="[310]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator --()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, icm20602.o(t._ZN4__rw14__rw_tree_iterISt4pairIKhhEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_hNS_11__select1stIS3_hEEEEEmmEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator --()
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_parent()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
</UL>

<P><STRONG><a name="[22b]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++(int)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, icm20602.o(t._ZN4__rw14__rw_tree_iterISt4pairIKhhEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_hNS_11__select1stIS3_hEEEEEppEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++(int) &rArr; __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++()
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[315]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, icm20602.o(t._ZN4__rw14__rw_tree_iterISt4pairIKhhEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_hNS_11__select1stIS3_hEEEEEppEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++()
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_parent()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++(int)
</UL>

<P><STRONG><a name="[ad]"></a>__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
</UL>
<P><STRONG><a name="[31f]"></a>unsigned __rw::__rw_new_capacity&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;&rang;(unsigned, const T1*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rw17__rw_new_capacityINS_9__rb_treeIhSt4pairIKhhENS_11__select1stIS4_hEESt4lessIhESaIS4_EEEEEjjPKT_))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer()
</UL>

<P><STRONG><a name="[349]"></a>unsigned __rw::__rw_new_capacity&lang;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&rang;(unsigned, const T1*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZN4__rw17__rw_new_capacityISt6vectorI13action_matrixSaIS2_EEEEjjPKT_))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
</UL>

<P><STRONG><a name="[32d]"></a>__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_key()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rw17__rw_rb_tree_nodeISaISt4pairIKhhEES3_hNS_11__select1stIS3_hEEE6_C_keyEv))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
</UL>

<P><STRONG><a name="[313]"></a>__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rw17__rw_rb_tree_nodeISaISt4pairIKhhEES3_hNS_11__select1stIS3_hEEE7_C_leftEv))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator --()
</UL>

<P><STRONG><a name="[312]"></a>__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rw17__rw_rb_tree_nodeISaISt4pairIKhhEES3_hNS_11__select1stIS3_hEEE8_C_rightEv))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator --()
</UL>

<P><STRONG><a name="[311]"></a>__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_parent()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rw17__rw_rb_tree_nodeISaISt4pairIKhhEES3_hNS_11__select1stIS3_hEEE9_C_parentEv))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator --()
</UL>

<P><STRONG><a name="[2ad]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEE6resizeEjRKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>

<P><STRONG><a name="[275]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[400]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev), UNUSED)

<P><STRONG><a name="[a8]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
</UL>
<P><STRONG><a name="[401]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev), UNUSED)

<P><STRONG><a name="[276]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const char*, int)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[402]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev), UNUSED)

<P><STRONG><a name="[2a5]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[a3]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(i._ZSt13__rw_get_catsv)
</UL>
<P><STRONG><a name="[403]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev), UNUSED)

<P><STRONG><a name="[316]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE11_C_get_linkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned char&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_node(const std::pair&lang;const unsigned char, unsigned char&rang;&)
</UL>

<P><STRONG><a name="[318]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_node(const std::pair&lang;const unsigned char, unsigned char&rang;&)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE11_C_get_nodeERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_node(const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link()
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
</UL>

<P><STRONG><a name="[329]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_put_node(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, bool)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE11_C_put_nodeEPNS_17__rw_rb_tree_nodeIS8_S3_hS5_EEb))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[325]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE12_C_make_iterEPNS_17__rw_rb_tree_nodeIS8_S3_hS5_EE))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()
</UL>

<P><STRONG><a name="[319]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE13_C_erase_leafEPNS_17__rw_rb_tree_nodeIS8_S3_hS5_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_parent()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[31d]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE13__rotate_leftEPNS_17__rw_rb_tree_nodeIS8_S3_hS5_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_parent()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[31e]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE14__rotate_rightEPNS_17__rw_rb_tree_nodeIS8_S3_hS5_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_parent()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[317]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer()</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE17_C_add_new_bufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;(const std::allocator&lang;T1&rang;&)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::deallocate(__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer*, unsigned)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;(const std::allocator&lang;T1&rang;&)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;&rang;(unsigned, const T1*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link()
</UL>

<P><STRONG><a name="[323]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_deallocate_buffers()</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE21_C_deallocate_buffersEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_deallocate_buffers() &rArr; std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::deallocate(__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer*, unsigned) &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;(const std::allocator&lang;T1&rang;&)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::deallocate(__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer*, unsigned)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;(const std::allocator&lang;T1&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree()
</UL>

<P><STRONG><a name="[324]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[326]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[327]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)</STRONG> (Thumb, 1560 bytes, Stack size 56 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE5eraseENS_14__rw_tree_iterIS3_iPS3_RS3_NS_17__rw_rb_tree_nodeIS8_S3_hS5_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator ==&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_put_node(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, bool)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_parent()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[32a]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE5eraseENS_14__rw_tree_iterIS3_iPS3_RS3_NS_17__rw_rb_tree_nodeIS8_S3_hS5_EEEESF_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator !=&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator ==&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator ++(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree()
</UL>

<P><STRONG><a name="[32c]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE6insertERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_node(const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, bool&rang;::pair(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&, const bool&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::less&lang;unsigned char&rang;::operator ()(const unsigned char&, const unsigned char&) const
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator ==&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_key()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator --()
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::operator [](const unsigned char&)
</UL>

<P><STRONG><a name="[32b]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE8_C_eraseEPNS_17__rw_rb_tree_nodeIS8_S3_hS5_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*) &rArr;  __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_put_node(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, bool)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[32f]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)</STRONG> (Thumb, 714 bytes, Stack size 56 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE9_C_insertEPNS_17__rw_rb_tree_nodeIS8_S3_hS5_EESC_RKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_node(const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::less&lang;unsigned char&rang;::operator ()(const unsigned char&, const unsigned char&) const
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_make_iter(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_node(const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_parent()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_key()
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
</UL>

<P><STRONG><a name="[227]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned char&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EEC1ERKS7_bRKS8_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned char&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;::allocator(const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rightmost() const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[404]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rb_tree__sub_object(const std::less&lang;unsigned char&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EEC1ERKS7_bRKS8_), UNUSED)

<P><STRONG><a name="[2bd]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree()</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_deallocate_buffers()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_put_node(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~map()
</UL>

<P><STRONG><a name="[405]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::~__rb_tree__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, icm20602.o(t._ZN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EED1Ev), UNUSED)

<P><STRONG><a name="[328]"></a>bool __rw::operator ==&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, icm20602.o(t._ZN4__rweqISt4pairIKhhEiPS3_RS3_S4_S5_NS_17__rw_rb_tree_nodeISaIS3_ES3_hNS_11__select1stIS3_hEEEEEEbRKNS_14__rw_tree_iterIT_T0_T1_T2_T5_EERKNSB_ISC_SD_T3_T4_SG_EE))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator !=&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
</UL>

<P><STRONG><a name="[22d]"></a>bool __rw::operator !=&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, icm20602.o(t._ZN4__rwneISt4pairIKhhEiPS3_RS3_S4_S5_NS_17__rw_rb_tree_nodeISaIS3_ES3_hNS_11__select1stIS3_hEEEEEEbRKNS_14__rw_tree_iterIT_T0_T1_T2_T5_EERKNSB_ISC_SD_T3_T4_SG_EE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bool __rw::operator !=&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool __rw::operator ==&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;(const __rw::__rw_tree_iter&lang;T1, T2, T3, T4, T7&rang;&, const __rw::__rw_tree_iter&lang;T1, T2, T5, T6, T7&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[b6]"></a>device&lang;threeAxis, unsigned char&rang;::getData()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, icm20602.o(t._ZN6deviceI9threeAxishE7getDataEv))
<BR>[Address Reference Count : 2]<UL><LI> icm20602.o(.constdata__ZTV13ICM20602_Gyro)
<LI> icm20602.o(.constdata__ZTV6deviceI9threeAxishE)
</UL>
<P><STRONG><a name="[ba]"></a>device&lang;threeAxis, unsigned char&rang;::~device__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icm20602.o(t._ZN6deviceI9threeAxishED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = device&lang;threeAxis, unsigned char&rang;::~device__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device&lang;threeAxis, unsigned char&rang;::~device__sub_object()
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm20602.o(.constdata__ZTV6deviceI9threeAxishE)
</UL>
<P><STRONG><a name="[b9]"></a>device&lang;threeAxis, unsigned char&rang;::~device__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, icm20602.o(t._ZN6deviceI9threeAxishED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = device&lang;threeAxis, unsigned char&rang;::~device__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deviceBase::~deviceBase__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device&lang;threeAxis, unsigned char&rang;::~device__deallocating()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::~ICM20602_Gyro()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm20602.o(.constdata__ZTV6deviceI9threeAxishE)
</UL>
<P><STRONG><a name="[332]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator *() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icm20602.o(t._ZNK4__rw14__rw_tree_iterISt4pairIKhhEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_hNS_11__select1stIS3_hEEEEEdeEv))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::operator [](const unsigned char&)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator -&rang;() const
</UL>

<P><STRONG><a name="[22a]"></a>__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator -&rang;() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, icm20602.o(t._ZNK4__rw14__rw_tree_iterISt4pairIKhhEiPS3_RS3_NS_17__rw_rb_tree_nodeISaIS3_ES3_hNS_11__select1stIS3_hEEEEEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator -&rang;() const
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator *() const
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[336]"></a>__rw::__rw_collate_data&lang;char&rang;::_C_coll_order(char) const</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, char.o(t._ZNK4__rw17__rw_collate_dataIcE13_C_coll_orderEc), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate&lang;char&rang;::do_transform(const char*, const char*) const
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const
</UL>

<P><STRONG><a name="[31b]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, icm20602.o(t._ZNK4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE11_C_leftmostEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_left()
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned char&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
</UL>

<P><STRONG><a name="[31a]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rightmost() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, icm20602.o(t._ZNK4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE12_C_rightmostEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rightmost() const
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_right()
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned char&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
</UL>

<P><STRONG><a name="[31c]"></a>__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, icm20602.o(t._ZNK4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE7_C_rootEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_root() const
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;::_C_parent()
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned char&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::erase(__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_right(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rotate_left(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_erase_leaf(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*)
</UL>

<P><STRONG><a name="[32e]"></a>std::less&lang;unsigned char&rang;::operator ()(const unsigned char&, const unsigned char&) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, icm20602.o(t._ZNKSt4lessIhEclERKhS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::less&lang;unsigned char&rang;::operator ()(const unsigned char&, const unsigned char&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
</UL>

<P><STRONG><a name="[333]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZNKSt6vectorI13action_matrixSaIS0_EE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::size() const
</UL>

<P><STRONG><a name="[25d]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::size() const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNKSt6vectorI13action_matrixSaIS0_EE4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::size() const
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin() const
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end() const
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
</UL>

<P><STRONG><a name="[334]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZNKSt6vectorI13action_matrixSaIS0_EE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::size() const
</UL>

<P><STRONG><a name="[348]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::capacity() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZNKSt6vectorI13action_matrixSaIS0_EE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
</UL>

<P><STRONG><a name="[335]"></a>std::collate&lang;char&rang;::do_compare(const char*, const char*, const char*, const char*) const</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, char.o(t._ZNKSt7collateIcE10do_compareEPKcS2_S2_S2_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_collate_data&lang;char&rang;::_C_coll_order(char) const
</UL>

<P><STRONG><a name="[337]"></a>std::collate&lang;char&rang;::do_transform(const char*, const char*) const</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, char.o(t._ZNKSt7collateIcE12do_transformEPKcS2_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, unsigned, const std::allocator&lang;char&rang;&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::begin()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_collate_data&lang;char&rang;::_C_coll_order(char) const
</UL>

<P><STRONG><a name="[d8]"></a>std::collate&lang;char&rang;::do_hash(const char*, const char*) const</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, char.o(t._ZNKSt7collateIcE7do_hashEPKcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::collate&lang;char&rang;::do_hash(const char*, const char*) const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt14collate_bynameIcE)
</UL>
<P><STRONG><a name="[e2]"></a>std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[e1]"></a>std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[338]"></a>std::numpunct&lang;char&rang;::do_grouping() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, char.o(t._ZNKSt8numpunctIcE11do_groupingEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[339]"></a>std::numpunct&lang;char&rang;::do_truename() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, char.o(t._ZNKSt8numpunctIcE11do_truenameEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[33a]"></a>std::numpunct&lang;char&rang;::do_falsename() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, char.o(t._ZNKSt8numpunctIcE12do_falsenameEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[33b]"></a>std::allocator&lang;action_matrix&rang;::deallocate(action_matrix*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSaI13action_matrixE10deallocateEPS_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::allocator&lang;action_matrix&rang;::deallocate(action_matrix*, unsigned) &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::~vector()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
</UL>

<P><STRONG><a name="[33c]"></a>std::allocator&lang;action_matrix&rang;::destroy(action_matrix*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSaI13action_matrixE7destroyEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::allocator&lang;action_matrix&rang;::destroy(action_matrix*) &rArr; action_matrix::~action_matrix() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;const action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_destroy(action_matrix*, action_matrix*)
</UL>

<P><STRONG><a name="[33d]"></a>std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSaI13action_matrixE8allocateEjPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
</UL>

<P><STRONG><a name="[33e]"></a>std::allocator&lang;action_matrix&rang;::construct(action_matrix*, const action_matrix&)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSaI13action_matrixE9constructEPS_RKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::allocator&lang;action_matrix&rang;::construct(action_matrix*, const action_matrix&)
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(const action_matrix&)
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;const action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
</UL>

<P><STRONG><a name="[34b]"></a>std::allocator&lang;action_matrix&rang;::allocator(const std::allocator&lang;action_matrix&rang;&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSaI13action_matrixEC1ERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::allocator&lang;action_matrix&rang;&)
</UL>

<P><STRONG><a name="[406]"></a>std::allocator&lang;action_matrix&rang;::allocator__sub_object(const std::allocator&lang;action_matrix&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSaI13action_matrixEC1ERKS0_), UNUSED)

<P><STRONG><a name="[24f]"></a>std::allocator&lang;action_matrix&rang;::allocator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSaI13action_matrixEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[407]"></a>std::allocator&lang;action_matrix&rang;::allocator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSaI13action_matrixEC1Ev), UNUSED)

<P><STRONG><a name="[321]"></a>std::allocator&lang;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;(const std::allocator&lang;T1&rang;&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icm20602.o(t._ZNSaIN4__rw17__rw_rb_tree_nodeISaISt4pairIKhhEES3_hNS_11__select1stIS3_hEEEEEC1IS3_EERKSaIT_E))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_deallocate_buffers()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer()
</UL>

<P><STRONG><a name="[408]"></a>std::allocator&lang;__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::allocator__sub_object&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;(const std::allocator&lang;T1&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, icm20602.o(t._ZNSaIN4__rw17__rw_rb_tree_nodeISaISt4pairIKhhEES3_hNS_11__select1stIS3_hEEEEEC1IS3_EERKSaIT_E), UNUSED)

<P><STRONG><a name="[322]"></a>std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::deallocate(__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, icm20602.o(t._ZNSaIN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE22_C_rb_tree_node_bufferEE10deallocateEPSA_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::deallocate(__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer*, unsigned) &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_deallocate_buffers()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer()
</UL>

<P><STRONG><a name="[320]"></a>std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;(const std::allocator&lang;T1&rang;&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icm20602.o(t._ZNSaIN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE22_C_rb_tree_node_bufferEEC1IS3_EERKSaIT_E))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_deallocate_buffers()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer()
</UL>

<P><STRONG><a name="[409]"></a>std::allocator&lang;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_rb_tree_node_buffer&rang;::allocator__sub_object&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;(const std::allocator&lang;T1&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, icm20602.o(t._ZNSaIN4__rw9__rb_treeIhSt4pairIKhhENS_11__select1stIS3_hEESt4lessIhESaIS3_EE22_C_rb_tree_node_bufferEEC1IS3_EERKSaIT_E), UNUSED)

<P><STRONG><a name="[331]"></a>std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;::allocator(const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icm20602.o(t._ZNSaISt4pairIKhhEEC1ERKS2_))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::__rb_tree(const std::less&lang;unsigned char&rang;&, bool, const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)
</UL>

<P><STRONG><a name="[40a]"></a>std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;::allocator__sub_object(const std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, icm20602.o(t._ZNSaISt4pairIKhhEEC1ERKS2_), UNUSED)

<P><STRONG><a name="[226]"></a>std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;::allocator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, icm20602.o(t._ZNSaISt4pairIKhhEEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[40b]"></a>std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;::allocator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, icm20602.o(t._ZNSaISt4pairIKhhEEC1Ev), UNUSED)

<P><STRONG><a name="[26e]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, locale.o(t._ZNSs11_C_allocateEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_parse_name(__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;&, const char*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>

<P><STRONG><a name="[2a2]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::begin()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, char.o(t._ZNSs5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::begin() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate&lang;char&rang;::do_transform(const char*, const char*) const
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const
</UL>

<P><STRONG><a name="[342]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, locale.o(t._ZNSs7replaceEjjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
</UL>

<P><STRONG><a name="[343]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, char.o(t._ZNSs7replaceEjjPKcjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[340]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, char.o(t._ZNSs9_C_getRepEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, unsigned, const std::allocator&lang;char&rang;&)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::begin()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[341]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, char.o(t._ZNSs9_C_unlinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::begin()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
</UL>

<P><STRONG><a name="[241]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
</UL>

<P><STRONG><a name="[40c]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE), UNUSED)

<P><STRONG><a name="[2a1]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, unsigned, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, char.o(t._ZNSsC1EPKcjRKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, unsigned, const std::allocator&lang;char&rang;&) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate&lang;char&rang;::do_transform(const char*, const char*) const
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::do_transform(const char*, const char*) const
</UL>

<P><STRONG><a name="[40d]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const char*, unsigned, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, char.o(t._ZNSsC1EPKcjRKSaIcE), UNUSED)

<P><STRONG><a name="[1c2]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func5&rang;
</UL>

<P><STRONG><a name="[40e]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE), UNUSED)

<P><STRONG><a name="[242]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::numpunct&lang;char&rang;::do_falsename() const
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::numpunct&lang;char&rang;::do_truename() const
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::numpunct&lang;char&rang;::do_grouping() const
</UL>

<P><STRONG><a name="[40f]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs), UNUSED)

<P><STRONG><a name="[8f]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::~__rw_messages_base()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::numpunct&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate&lang;char&rang;::do_hash(const char*, const char*) const
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::collate_byname&lang;char&rang;::~collate_byname()
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_numpunct_impl_data&lang;char&rang;::~__rw_numpunct_impl_data()
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_punct_data&lang;char&rang;::~__rw_punct_data()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_parse_name(__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;&, const char*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::global(const std::locale&)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> locale.o(i._ZNSt6localeC1ERKS_PKci)
<LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
<LI> locale.o(i._ZN4__rw15__rw_locale_impC1ERKS0_PKcj)
<LI> locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
</UL>
<P><STRONG><a name="[410]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev), UNUSED)

<P><STRONG><a name="[270]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::_C_parse_name(__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;&, const char*)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const char*, int)
</UL>

<P><STRONG><a name="[272]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::numpunct&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&, const std::locale&, int)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const __rw::__rw_locale_imp&, const char*, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[22c]"></a>std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, icm20602.o(t._ZNSt3mapIhhSt4lessIhESaISt4pairIKhhEEE3endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::end()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[229]"></a>std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, icm20602.o(t._ZNSt3mapIhhSt4lessIhESaISt4pairIKhhEEE5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_leftmost() const
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[228]"></a>std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::operator [](const unsigned char&)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, icm20602.o(t._ZNSt3mapIhhSt4lessIhESaISt4pairIKhhEEEixERS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = std::map&lang;unsigned char, unsigned char, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::operator [](const unsigned char&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_insert(__rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;*, const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_node(const std::pair&lang;const unsigned char, unsigned char&rang;&) &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_get_link() &rArr; __rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::_C_add_new_buffer() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::operator *() const
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::init()
</UL>

<P><STRONG><a name="[330]"></a>std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, bool&rang;::pair(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&, const bool&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, icm20602.o(t._ZNSt4pairIN4__rw14__rw_tree_iterIS_IKhhEiPS3_RS3_NS0_17__rw_rb_tree_nodeISaIS3_ES3_hNS0_11__select1stIS3_hEEEEEEbEC1ERKSB_RKb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, bool&rang;::pair(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&, const bool&)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;::__rw_tree_iter(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rb_tree&lang;unsigned char, std::pair&lang;const unsigned char, unsigned char&rang;, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;, std::less&lang;unsigned char&rang;, std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;&rang;::insert(const std::pair&lang;const unsigned char, unsigned char&rang;&)
</UL>

<P><STRONG><a name="[411]"></a>std::pair&lang;__rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;, bool&rang;::pair__sub_object(const __rw::__rw_tree_iter&lang;std::pair&lang;const unsigned char, unsigned char&rang;, int, std::pair&lang;const unsigned char, unsigned char&rang;*, std::pair&lang;const unsigned char, unsigned char&rang;&, __rw::__rw_rb_tree_node&lang;std::allocator&lang;std::pair&lang;const unsigned char, unsigned char&rang;&rang;, std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char, __rw::__select1st&lang;std::pair&lang;const unsigned char, unsigned char&rang;, unsigned char&rang;&rang;&rang;&, const bool&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, icm20602.o(t._ZNSt4pairIN4__rw14__rw_tree_iterIS_IKhhEiPS3_RS3_NS0_17__rw_rb_tree_nodeISaIS3_ES3_hNS0_11__select1stIS3_hEEEEEEbEC1ERKSB_RKb), UNUSED)

<P><STRONG><a name="[346]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_destroy(action_matrix*, action_matrix*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EE10_C_destroyEPS0_S3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_destroy(action_matrix*, action_matrix*) &rArr; std::allocator&lang;action_matrix&rang;::destroy(action_matrix*) &rArr; action_matrix::~action_matrix() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::destroy(action_matrix*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::~vector()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
</UL>

<P><STRONG><a name="[347]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EE13_C_insert_auxEPS0_RKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&) &rArr; std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_destroy(action_matrix*, action_matrix*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::construct(action_matrix*, const action_matrix&)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::destroy(action_matrix*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::deallocate(action_matrix*, unsigned)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::capacity() const
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::size() const
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&rang;(unsigned, const T1*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&)
</UL>

<P><STRONG><a name="[262]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EE3endEv))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::~vector()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
</UL>

<P><STRONG><a name="[261]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EE5beginEv))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator [](unsigned)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::~vector()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
</UL>

<P><STRONG><a name="[251]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EE9push_backERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::push_back(const action_matrix&) &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&) &rArr; std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end()
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::construct(action_matrix*, const action_matrix&)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[250]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::allocator&lang;action_matrix&rang;&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EEC1ERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::allocator&lang;action_matrix&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::allocator(const std::allocator&lang;action_matrix&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::unscentedTrans(const action_matrix&, const action_matrix&)
</UL>

<P><STRONG><a name="[412]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector__sub_object(const std::allocator&lang;action_matrix&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EEC1ERKS1_), UNUSED)

<P><STRONG><a name="[263]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EEC1ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&) &rArr; std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;const action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::allocator(const std::allocator&lang;action_matrix&rang;&)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::deallocate(action_matrix*, unsigned)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin() const
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::size() const
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end() const
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&rang;(unsigned, const T1*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
</UL>

<P><STRONG><a name="[413]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector__sub_object(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EEC1ERKS2_), UNUSED)

<P><STRONG><a name="[260]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::~vector()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::~vector() &rArr; std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_destroy(action_matrix*, action_matrix*) &rArr; std::allocator&lang;action_matrix&rang;::destroy(action_matrix*) &rArr; action_matrix::~action_matrix() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_destroy(action_matrix*, action_matrix*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::deallocate(action_matrix*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
</UL>

<P><STRONG><a name="[414]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::~vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EED1Ev), UNUSED)

<P><STRONG><a name="[25f]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&) &rArr; std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::copy&lang;const action_matrix*, action_matrix*&rang;(T1, T1, T2)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;const action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_destroy(action_matrix*, action_matrix*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::allocate(unsigned, const void*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::deallocate(action_matrix*, unsigned)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::capacity() const
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin() const
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::size() const
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::end() const
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&rang;(unsigned, const T1*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictZ()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::predictX(const action_matrix&)
</UL>

<P><STRONG><a name="[25c]"></a>std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator [](unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZNSt6vectorI13action_matrixSaIS0_EEixEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator [](unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::begin()
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateM(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUKF::updateC(std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&, std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;, const action_matrix&)
</UL>

<P><STRONG><a name="[34e]"></a>std::numpunct&lang;char&rang;::_C_initfacet(const std::locale&)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, char.o(t._ZNSt8numpunctIcE12_C_initfacetERKSt6locale), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[34a]"></a>T2 std::uninitialized_copy&lang;action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, adaptiveunscentedkalmanfilter.o(t._ZSt18uninitialized_copyIP13action_matrixS1_SaIS0_EET0_T_S4_S3_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = T2 std::uninitialized_copy&lang;action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&) &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::construct(action_matrix*, const action_matrix&)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::destroy(action_matrix*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::_C_insert_aux(action_matrix*, const action_matrix&)
</UL>

<P><STRONG><a name="[34c]"></a>T2 std::uninitialized_copy&lang;const action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, adaptiveunscentedkalmanfilter.o(t._ZSt18uninitialized_copyIPK13action_matrixPS0_SaIS0_EET0_T_S6_S5_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = T2 std::uninitialized_copy&lang;const action_matrix*, action_matrix*, std::allocator&lang;action_matrix&rang;&rang;(T1, T1, T2, T3&) &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::construct(action_matrix*, const action_matrix&)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;action_matrix&rang;::destroy(action_matrix*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
</UL>

<P><STRONG><a name="[33f]"></a>const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(t._ZSt3maxIjERKT_S2_S2_))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::vector(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, unsigned, const std::allocator&lang;char&rang;&)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[34d]"></a>T2 std::copy&lang;const action_matrix*, action_matrix*&rang;(T1, T1, T2)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(t._ZSt4copyIPK13action_matrixPS0_ET0_T_S5_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = T2 std::copy&lang;const action_matrix*, action_matrix*&rang;(T1, T1, T2) &rArr; action_matrix::operator =(const action_matrix&) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;::operator =(const std::vector&lang;action_matrix, std::allocator&lang;action_matrix&rang;&rang;&)
</UL>

<P><STRONG><a name="[2f0]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[415]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[416]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[417]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[418]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[419]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[2e2]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[34f]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2fa]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[352]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[355]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[359]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[302]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[357]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2e1]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[358]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2fd]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[35a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2fe]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[41a]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[300]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[41b]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[41c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[35b]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[35e]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2fc]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[35c]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[351]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[354]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[2e3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[35d]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[2ff]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[35f]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2f8]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[2f9]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[361]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[29e]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_stream::operator &lang;&lang;(float) const
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAHRS
</UL>

<P><STRONG><a name="[362]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[363]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[113]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[41d]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[41e]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[350]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[5]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[f5]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[f9]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[356]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[2f3]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[1ac]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1b3]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1b2]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[364]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[233]"></a>[local to main_cpp]::running()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i._ZN25_INTERNAL_8_main_cpp_main7runningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = [local to main_cpp]::running() &rArr;  [local to main_cpp]::running() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeFlag
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCmdState
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataSend
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculatePos
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Init()
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getICM20602_Gyro()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateEncoder
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_cpp]::running()
</UL>

<P><STRONG><a name="[23b]"></a>[local to user_cpp]::usartACCT(unsigned char, unsigned short&)</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, user.o(i._ZN29_INTERNAL_8_user_cpp_6a3cf8a19usartACCTEhRt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to user_cpp]::usartACCT(unsigned char, unsigned short&) &rArr; resetAttitude &rArr; action_matrix::operator =(const action_matrix&) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetPos
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetAttitude
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usartCmdInput
</UL>

<P><STRONG><a name="[225]"></a>[local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, icm20602.o(i._ZN34_INTERNAL_12_ICM20602_cpp_00915af118changeSPIconfigureEP11SPI_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to ICM20602_cpp]::changeSPIconfigure(SPI_TypeDef*) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::multiRead(unsigned char, unsigned char*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::rawDataWrite(unsigned char, unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::rawDataRead(unsigned char)
</UL>

<P><STRONG><a name="[e4]"></a>__sti___12_ICM20602_cpp_00915af1</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, icm20602.o(i.__sti___12_ICM20602_cpp_00915af1))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___12_ICM20602_cpp_00915af1 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20602_Gyro::ICM20602_Gyro(SPI_TypeDef*, GPIO_TypeDef*, unsigned short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icm20602.o(.init_array)
</UL>
<P><STRONG><a name="[8e]"></a>&lang;Func5&rang;</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, adaptiveunscentedkalmanfilter.o(i.<Func5>))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = &lang;Func5&rang; &rArr; action_matrix::action_matrix(unsigned, unsigned, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adaptiveunscentedkalmanfilter.o(i._ZN4AUKFC1EfffRK13action_matrixS2_S2_S2_S2_PFS0_S2_S2_EPFS0_S2_Ej)
</UL>
<P><STRONG><a name="[a1]"></a>&lang;Func1&rang;</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, calculateattitude.o(i.<Func1>))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = &lang;Func1&rang; &rArr; action_matrix::action_matrix(unsigned, unsigned, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calculateattitude.o(i._ZN9aukf9axisC1Ev)
</UL>
<P><STRONG><a name="[9f]"></a>[local to calculateAttitude_cpp]::UKFmeasure(const action_matrix&)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, calculateattitude.o(i._ZN43_INTERNAL_21_calculateAttitude_cpp_initAHRS10UKFmeasureERK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = [local to calculateAttitude_cpp]::UKFmeasure(const action_matrix&) &rArr; operator *(const action_matrix&, const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTransMatrix(const action_matrix&)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !(const action_matrix&)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, const action_matrix&)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator =(const action_matrix&)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calculateattitude.o(i._ZN9aukf9axisC1Ev)
</UL>
<P><STRONG><a name="[245]"></a>[local to calculateAttitude_cpp]::magAccFixZeroRate()</STRONG> (Thumb, 620 bytes, Stack size 576 bytes, calculateattitude.o(i._ZN43_INTERNAL_21_calculateAttitude_cpp_initAHRS17magAccFixZeroRateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = [local to calculateAttitude_cpp]::magAccFixZeroRate() &rArr; stdData(threeAxis*, unsigned) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getADXRS453()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdData(threeAxis*, unsigned)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getI3G4250D()
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(float*, unsigned)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;meanData(threeAxis*, unsigned)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;float*&rang;(T1, unsigned)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void shiftRightData&lang;threeAxis*&rang;(T1, unsigned)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threeAxis::operator =(const threeAxis&)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLSM303AGR_Mag()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLSM303AGR_Acc()
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
</UL>

<P><STRONG><a name="[24a]"></a>[local to calculateAttitude_cpp]::Quaternion_to_Euler(const action_matrix&)</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, calculateattitude.o(i._ZN43_INTERNAL_21_calculateAttitude_cpp_initAHRS19Quaternion_to_EulerERK13action_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to calculateAttitude_cpp]::Quaternion_to_Euler(const action_matrix&) &rArr; std::asin(float) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::asin(float)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::operator [](unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateAHRS
</UL>

<P><STRONG><a name="[a0]"></a>[local to calculateAttitude_cpp]::UKFpre(const action_matrix&, const action_matrix&)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, calculateattitude.o(i._ZN43_INTERNAL_21_calculateAttitude_cpp_initAHRS6UKFpreERK13action_matrixS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = [local to calculateAttitude_cpp]::UKFpre(const action_matrix&, const action_matrix&) &rArr; integral(const action_matrix&, const action_matrix&, float) &rArr; operator +(const action_matrix&, const action_matrix&) &rArr; __cxa_throw &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integral(const action_matrix&, const action_matrix&, float)
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator *(const action_matrix&, float)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator /(const action_matrix&, float)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::~action_matrix()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calculateattitude.o(i._ZN9aukf9axisC1Ev)
</UL>
<P><STRONG><a name="[e5]"></a>__sti___21_calculateAttitude_cpp_initAHRS</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, calculateattitude.o(i.__sti___21_calculateAttitude_cpp_initAHRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = __sti___21_calculateAttitude_cpp_initAHRS &rArr; aukf9axis::aukf9axis() &rArr; AUKF::AUKF(float, float, float, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, const action_matrix&, action_matrix(*)(const action_matrix&, const action_matrix&), action_matrix(*)(const action_matrix&), unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aukf9axis::aukf9axis()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;action_matrix::action_matrix(unsigned, unsigned, unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> calculateattitude.o(.init_array)
</UL>
<P><STRONG><a name="[1dc]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7c]"></a>[local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, arm_exceptions_throw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::armcpp_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*) &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_throw.o(.text)
</UL>
<P><STRONG><a name="[360]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[353]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[162]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[7d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[23e]"></a>[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rwstdexcept.o(i._ZN37_INTERNAL_15_rwstdexcept_cpp_8697b68a4__rw13__rw_vfmatstrEPcjPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list) &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(const char*, std::__va_list)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[23f]"></a>[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, rwstdexcept.o(i._ZN37_INTERNAL_15_rwstdexcept_cpp_8697b68a4__rw13__rw_vfmatstrEPcjiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; __cxa_rethrow &rArr; _Unwind_RaiseException &rArr; __ARM_Unwind_RaiseException &rArr; __ARM_unwind_next_frame &rArr; [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[a6]"></a>[local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b012tbc_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to rtti_c]::tbc_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) &rArr; std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtti.o(i.__dynamic_cast)
</UL>
<P><STRONG><a name="[a7]"></a>[local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b017tbc_post_downcastEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to rtti_c]::tbc_post_downcast(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*) &rArr; std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtti.o(i.__dynamic_cast)
</UL>
<P><STRONG><a name="[237]"></a>[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b021traverse_base_classesEPvPKSt9type_infoP28a_base_class_traversal_blockPN10__cxxabiv122__base_class_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
</UL>

<P><STRONG><a name="[239]"></a>[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b023find_base_class_at_addrEPvS0_PKSt9type_infoS3_Pi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
</UL>

<P><STRONG><a name="[238]"></a>[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b024get_virtual_base_pointerEPvPN10__cxxabiv122__base_class_type_infoE))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::find_base_class_at_addr(void*, void*, const std::type_info*, const std::type_info*, int*)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::traverse_base_classes(void*, const std::type_info*, a_base_class_traversal_block*, __cxxabiv1::__base_class_type_info*)
</UL>

<P><STRONG><a name="[23a]"></a>[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)</STRONG> (Thumb, 476 bytes, Stack size 96 bytes, rtti.o(i._ZN27_INTERNAL_6_rtti_c_066a44b028derived_to_base_conversion_rEPvPS0_PKSt9type_infoS4_jPiiPS4_P19a_result_virtualityS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) &rArr;  [local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::get_virtual_base_pointer(void*, __cxxabiv1::__base_class_type_info*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_get_typeid
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::operator ==(const std::type_info&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__derived_to_base_conversion
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rtti_c]::derived_to_base_conversion_r(void*, void**, const std::type_info*, const std::type_info*, unsigned, int*, int, const std::type_info**, a_result_virtuality*, int*)
</UL>

<P><STRONG><a name="[7f]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[17b]"></a>[local to unwind_pr_c]::next_unwind_byte(uwdata*)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, unwind_prcommon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_cpp_prcommon
</UL>

<P><STRONG><a name="[82]"></a>[local to unwinder_c]::EIT_comparator(const void*, const void*)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to unwinder_c]::EIT_comparator(const void*, const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unwinder.o(.text)
</UL>
<P><STRONG><a name="[17d]"></a>[local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, unwinder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to unwinder_c]::find_and_expand_eit_entry(_Unwind_Control_Block*, unsigned) &rArr; bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsearch
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_unwind_next_frame
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_Unwind_RaiseException
</UL>

<P><STRONG><a name="[e6]"></a>__sti___8_char_cpp_a3dc957a</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(i.__sti___8_char_cpp_a3dc957a))
<BR>[Address Reference Count : 1]<UL><LI> char.o(.init_array)
</UL>
<P><STRONG><a name="[90]"></a>&lang;Func5&rang;</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, locale.o(i.<Func5>))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = &lang;Func5&rang; &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> locale.o(i._ZNSt6localeC1ERKS_PKci)
<LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
<LI> locale.o(i._ZN4__rw15__rw_locale_impC1ERKS0_PKcj)
</UL>
<P><STRONG><a name="[e7]"></a>__sti___10_locale_cpp_ff99fc7b</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locale.o(i.__sti___10_locale_cpp_ff99fc7b))
<BR>[Address Reference Count : 1]<UL><LI> locale.o(.init_array)
</UL>
<P><STRONG><a name="[89]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>__sti___10_rwcats_cpp_64e8068e</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwcats.o(i.__sti___10_rwcats_cpp_64e8068e))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___10_rwcats_cpp_64e8068e &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(.init_array)
</UL>
<P><STRONG><a name="[1ae]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1b5]"></a>_locale_name</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_mixed
</UL>

<P><STRONG><a name="[1b7]"></a>_set_locale_mixed</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, locale_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
</UL>

<P><STRONG><a name="[1b6]"></a>_set_locale_byname</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
